---
title: "IMPACT OF INFECTIONS IN L-VAD PATIENTS"
format: html
toc: true
toc-depth: 4
editor: visual
echo: FALSE
warning: FALSE
csl: "/Users/adhoksajaspinelli/Documents/R_output/Falsitta_2024/vancouver-superscript.csl"
crossref: 
  fig-title: Figure
  tbl-title: Table
  fig-prefix: Figure
  tbl-prefix: Table
---

## INTRODUCTION

```{r Libraries}

library(broom)
library(cmprsk)
library(finalfit)
library(flextable)
library(ggpubr)
library(ggsurvfit)
library(glue)
library(gt)
library(gtsummary)
library(Hmisc)
library(lubridate)
library(parameters)
library(patchwork)
library(RColorBrewer)
library(survival)
library(survminer)
library(tableone)
library(tidycmprsk)
library(tidyverse)

```

```{r Data_loading, echo=FALSE,message=FALSE}

#Clear existing data and graphics
rm(list=ls())
graphics.off()
#Read Data
#data=read.csv('LVAD20102024.csv')
data=read.csv("~/Documents/R_output/LVAD20102024/LVAD20102024.csv")
#Setting Labels

label(data$study_id)="Study ID"
label(data$redcap_repeat_instrument)="Repeat Instrument"
label(data$redcap_repeat_instance)="Repeat Instance"
label(data$name)="Surname Name"
label(data$dob)="Date of birth"
label(data$age)="Age at LVAD implantation"
label(data$sex)="Sex"
label(data$intermacs)="INTERMACS class"
label(data$lvad_date)="LVAD Implant Date"
label(data$lvad_redo_date)="2nd LVAD Implant Date (LVAD redo)"
label(data$lvad_mod)="Model"
label(data$lvad_ind)="LVAD indication"
label(data$cmp_aethiology)="Cardiomyopathy aethiology"
label(data$comments)="Comments"
label(data$demographics_complete)="Complete?"
label(data$hyper)="Hypertension"
label(data$dyslip)="Dyslipidemia"
label(data$diabetes)="Diabetes (type 1 or type 2)"
label(data$renal_insuff)="Renal insufficiency"
label(data$renal_stadiation)="IRC "
label(data$smoke)="History of smoking"
label(data$drugs)="History of drug or alcohol abuse"
label(data$coronary_dis)="Coronary artery disease"
label(data$coronary_int___1)="Coronary artery interventions (choice=Percutaneous Coronary Intervention (PCI) or Percutaneous transluminal coronary angioplasty (PTCA))"
label(data$coronary_int___2)="Coronary artery interventions (choice=Coronary Artery Bypass Graft Surgery (CABG))"
label(data$coronary_int___3)="Coronary artery interventions (choice=Other)"
label(data$infarction)="Myocadial infarction"
label(data$arrhyt)="Arrhytmia"
label(data$arrhyt_type___1)="Arrhytmia Type (choice=Atrial Fibrillation)"
label(data$arrhyt_type___2)="Arrhytmia Type (choice=Atrial Flutter)"
label(data$arrhyt_type___3)="Arrhytmia Type (choice=Ventricular Fibrillation)"
label(data$arrhyt_type___4)="Arrhytmia Type (choice=Ventricular Tachycardia)"
label(data$valve_rep)="Valve repair/replace"
label(data$pm)="Pacemeaker/defribillator"
label(data$cardhistorynotes)="Notes"
label(data$resp_dis)="Respiratory disorder"
label(data$resp_dis_type___1)="Respiratory condition (choice=Ashtma)"
label(data$resp_dis_type___2)="Respiratory condition (choice=COPD)"
label(data$resp_dis_type___3)="Respiratory condition (choice=Bronchiectasis)"
label(data$resp_dis_type___5)="Respiratory condition (choice=Obstructive Sleep Apnea Syndrome (OSAS))"
label(data$resp_dis_type___4)="Respiratory condition (choice=Other respiratory conditions)"
label(data$neuro_hist)="Neurologic disorders"
label(data$neuro_type___1)="Neurology condition (choice=Transitory Ischaemic Attack (TIA))"
label(data$neuro_type___2)="Neurology condition (choice=Ischaemic Stroke)"
label(data$neuro_type___3)="Neurology condition (choice=Haemorragic Stroke)"
label(data$neuro_type___4)="Neurology condition (choice=Seizure)"
label(data$neuro_type___5)="Neurology condition (choice=Other)"
label(data$neoplasia)="Neoplasia/cancer"
label(data$surgery)="Any major previous surgery?"
label(data$surgery_type)="Specify"
label(data$sternotomy)="Previous sternotomy?"
label(data$sternotomy_n)="Number of sternotomy"
label(data$medical_history_complete)="Complete?"
label(data$emoglobina)="Haemoglobin"
label(data$ematocrito)="Haematocrit"
label(data$linfociti)="Lymphocytes"
label(data$platelet)="Platelet count"
label(data$potassio)="Potassium"
label(data$creatinina)="Creatinine "
label(data$urea)="Urea "
label(data$bnp)="serum BNP"
label(data$ntprobnp)="N-terminal pro b-type natriuretic peptide (NT-proBNP)"
label(data$albu)="Albumin "
label(data$colesterolo)="Colesterolo Totale"
label(data$colinesterasi)="Colinesterasi"
label(data$ldh)="Lactate dehydrogenase (LDH)"
label(data$ast)="AST"
label(data$alt)="ALT"
label(data$bili)="Bilirubin "
label(data$presurgery_laboratory_exam_complete)="Complete?"
label(data$rhc_comments)="Commenti"
label(data$rhcdate)="Right Heart Cateterization date"
label(data$rhc_hr)="Heart Rate "
label(data$bpsys)="Systolic Blood Pressure"
label(data$bpdia)="Diastolic Blood Pressure"
label(data$bpmean)="Mean Blood Pressure"
label(data$rhc_tmcs)="t-MCS during RHC"
label(data$rhc_tmcs_type)="Type of t-MCS during RHC "
label(data$rhc_intrp)="Inotropes during RHC (1,0)"
label(data$rhc_intr_text)="Inotropes  therapy during RHC (description of drug names and dose)"
label(data$rhc_vsprs)="Vasopressor during RHC (1,0)"
label(data$rhc_vsprs_text)="Vasopressor therapy during RHC (description of drug names and dose)"
label(data$rap)="Right Atrial Pressure (RAP)"
label(data$pas)="Pulmonary Artery Systolic Pressure (PAS)"
label(data$pad)="Pulmonary Artery Diastolic Pressure (PAD)"
label(data$mpap)="Mean Pulmonary Artery Pressure (mPAP)"
label(data$wedge)="Pulmonary Capillary Wedge Pressure (PCWP)"
label(data$co)="Cardiac Output (CO)"
label(data$ci)="Cardiac Index (CI)"
label(data$pvr)="Pulmonary Vascular Resistance (PVR)"
label(data$pvri)="Pulmonary Vascular Resistance Index (PVRi)"
label(data$svi)=" Stroke Volume Index (SVi)"
label(data$papi)="Pulmonary Artery Pulsatility Index (PAPi)"
label(data$rhc_snp_comments)="Commenti"
label(data$rhc_snp_maxdose)="NTP max dose"
label(data$rhc_snp_intrp)="Dobutamine/Milrinone started/titrated as compared to Baseline"
label(data$snp_rhc_hr)="post-SNP   Heart Rate "
label(data$snp_bpsys)="post-SNP   Systolic Blood Pressure "
label(data$snp_bpdia)="post-SNP   Diastolic Blood Pressure "
label(data$snp_bpmean)="post-SNP   Mean Blood Pressure "
label(data$snp_rap)="post-SNP   Right Atrial Pressure (RAP)"
label(data$snp_pas)="post-SNP   Pulmonary Artery Systolic Pressure (PAP)"
label(data$snp_pad)="post-SNP   Pulmonary Artery Diastolic Pressure (PAD)"
label(data$snp_mpap)="post-SNP   Mean Pulmonary Artery Pressure (mPAP)"
label(data$snp_wedge)="post-SNP   Pulmonary Capillary Wedge Pressure (PCWP)"
label(data$snp_co)="post-SNP   Cardiac Output (CO)"
label(data$snp_ci)="post-SNP   Cardiac Index (CI)"
label(data$snp_pvr)="post-SNP   Pulmonary Vascular Resistance (PVR)"
label(data$snp_pvri)="post-SNP   Pulmonary Vascular Resistance Index (PVRi) "
label(data$snp_rvsvi)="post-SNP Stroke Volume Index  (SVi)"
label(data$snp_papi)="post-SNP   Pulmonary Artery Pulsatility Index (PAPi)"
label(data$right_heart_catheterization_complete)="Complete?"
label(data$echo_date)="Date"
label(data$height)="Height "
label(data$weight)="Weight "
label(data$echo_lvedd)="Diametro Diastolico "
label(data$echo_fe)="Ejection Fraction"
label(data$echo_mr)="Mitral regurgitation"
label(data$echo_tr)="Tricuspid regurgitation"
label(data$echo_ar)="Aortic regurgitation"
label(data$echo_rvdiameter)="RV Diametro Telediastolico:"
label(data$echo_rvdysfunction)="RV dysfunction"
label(data$echo_rvfac)="RV Fractional Area Change (FAC)"
label(data$echo_tapse)="TAPSE"
label(data$echo_swave)="RV Onda S"
label(data$echo_rvvagradient)="Gradiente Max Rigurgito (tricuspide)"
label(data$echo_paps)="Pressione Sist. Art. Polmonare (PAPs):"
label(data$echo_rap)="PAD stimata"
label(data$bmi)="BMI"
label(data$bsa)="BSA"
label(data$nearest_echocardiogram_to_rhc_complete)="Complete?"
label(data$intrp_pre)="PRE operative Inotropes/Vasopressor support"
label(data$intrp_drug_pre___1)="Specify drug and max dose (mcg/kg/min) (choice=Adrenalina {adr_pre_max})"
label(data$intrp_drug_pre___2)="Specify drug and max dose (mcg/kg/min) (choice=Noradrenalina {noradr_pre_max})"
label(data$intrp_drug_pre___3)="Specify drug and max dose (mcg/kg/min) (choice=Dopamina {dopa_pre_max})"
label(data$intrp_drug_pre___4)="Specify drug and max dose (mcg/kg/min) (choice=Dobutamina {dobu_pre_max})"
label(data$intrp_drug_pre___5)="Specify drug and max dose (mcg/kg/min) (choice=Milrinone {milr_pre_max})"
label(data$intrp_drug_pre___6)="Specify drug and max dose (mcg/kg/min) (choice=Levosimendan{levo_pre_max})"
label(data$adr_pre_max)="adr_pre_max"
label(data$noradr_pre_max)="noradr_pre_max"
label(data$dopa_pre_max)="dopa_pre_max"
label(data$dobu_pre_max)="dobu_pre_max"
label(data$milr_pre_max)="milr_pre_max"
label(data$levo_pre_max)="levo_pre_max"
label(data$intrp_drug_admin___1)="Type of administration (choice=Preoperative administration)"
label(data$intrp_drug_admin___2)="Type of administration (choice=Outpatient  or at home)"
label(data$intrp_start)="Date of inotropes initiation"
label(data$mcs)="PREOPERATORY Temporary Mechanical Circulatory Support (MCS)"
label(data$mcs_type___0)="Type of MCS (choice=Intra Aortic Ballon Pump (IABP))"
label(data$mcs_type___1)="Type of MCS (choice=Impella)"
label(data$mcs_type___2)="Type of MCS (choice=ECMO)"
label(data$mcs_type___3)="Type of MCS (choice=Paracorporeal LVAD)"
label(data$mcs_type___4)="Type of MCS (choice=Right ventricle mechanical support)"
label(data$mcs_start)="MCS starting Date"
label(data$icu_discharge)="ICU discharge"
label(data$icu_los)="ICU LoS (post LVAD surgery)"
label(data$intrp_post)="POST operative Inotropes/Vasopressor support"
label(data$intrp_drug_post___1)="Specify drug and max dose (choice=Adrenalina {adr_post_max})"
label(data$intrp_drug_post___2)="Specify drug and max dose (choice=Noradrenalina {noradr_post_max})"
label(data$intrp_drug_post___3)="Specify drug and max dose (choice=Dopamina {dopa_post_max})"
label(data$intrp_drug_post___4)="Specify drug and max dose (choice=Dobutamina {dobu_post_max})"
label(data$intrp_drug_post___5)="Specify drug and max dose (choice=Milrinone {milr_post_max})"
label(data$intrp_drug_post___6)="Specify drug and max dose (choice=Levosimendan{levo_post_max})"
label(data$adr_post_max)="adr_post_max"
label(data$noradr_post_max)="noradr_post_max"
label(data$dopa_post_max)="dopa_post_max"
label(data$dobu_post_max)="dobu_post_max"
label(data$milr_post_max)="milr_post_max"
label(data$levo_post_max)="levo_post_max"
label(data$intrp_stop)="End of inotropes/vasopressor therapy"
label(data$mcs_post)="POST-OPERATORY Temporary Mechanical Circulatory Support (MCS)"
label(data$mcs_type_post___0)="Type of MCS (choice=Intra Aortic Ballon Pump (IABP))"
label(data$mcs_type_post___1)="Type of MCS (choice=Impella)"
label(data$mcs_type_post___2)="Type of MCS (choice=ECMO)"
label(data$mcs_type_post___4)="Type of MCS (choice=Right ventricle mechanical support)"
label(data$mcs_stop)="MCS ending Date"
label(data$prolonged_mv)="Prolonged Mechanical Ventilation"
label(data$ino)="Need for iNO"
label(data$tracheostomy)="Tracheostomy"
label(data$crrt)="Continuous Renal Replacement Therapies (CRRT)"
label(data$perioperative_support_and_icu_course_complete)="Complete?"
label(data$h_admission)="Admission to Niguarda hospital "
label(data$h_discharge)="Niguarda Hospital discharge"
label(data$bleed)="In-hospital major bleeding"
label(data$infection)="In-hospital major infection "
label(data$neuro)="In-hospital neurological event"
label(data$pumpdisf)="In-hospital pump dysfunction/thrombosis"
label(data$hturgent)="Urgent HT"
label(data$hturgent_reason)="Reason for urgent HT (descriptive)"
label(data$h_death)="In-hospital death"
label(data$h_death_reason___1)="In-hospital death reason (choice=Bleeding)"
label(data$h_death_reason___2)="In-hospital death reason (choice=Cardiac arrest)"
label(data$h_death_reason___3)="In-hospital death reason (choice=Cardiac decompensation)"
label(data$h_death_reason___4)="In-hospital death reason (choice=Right Heart Failure)"
label(data$h_death_reason___5)="In-hospital death reason (choice=Cardiac infarction)"
label(data$h_death_reason___6)="In-hospital death reason (choice=Circulatory failure)"
label(data$h_death_reason___7)="In-hospital death reason (choice=Infection/sepsis)"
label(data$h_death_reason___8)="In-hospital death reason (choice=Multi-organ failure)"
label(data$h_death_reason___9)="In-hospital death reason (choice=Renal failure)"
label(data$h_death_reason___10)="In-hospital death reason (choice=Respiratory failure)"
label(data$h_death_reason___11)="In-hospital death reason (choice=Stroke)"
label(data$h_death_reason___12)="In-hospital death reason (choice=Suicide)"
label(data$h_death_reason___13)="In-hospital death reason (choice=Pump dysfunction)"
label(data$h_death_reason___14)="In-hospital death reason (choice=Other)"
label(data$h_death_reason___15)="In-hospital death reason (choice=Unknown)"
label(data$early_rv_failure)="Early Right Ventricular Failure"
label(data$late_rv_failure)="Late Right Ventricular Failure"
label(data$in_hospital_outcomes_complete)="Complete?"
label(data$fu_rv_failure)="Right Ventricular Failure"
label(data$data_scompenso_vd)="Date of Right Ventricular Failure"
label(data$fu_vad_trombosi)="LVAD Thrombosis"
label(data$data_fu_vad_trombosi)="Date of LVAD thrombosis"
label(data$fu_stroke)="Stroke"
label(data$data_fu_stroke)="Date of Stroke"
label(data$fu_emorragia_cerebrale)="Brain Haemorrhage"
label(data$date_fu_emorragia_cereb)="Date of Brain Haemorrhage"
label(data$fu_aritmia_maggiore)="Major arrhythmia"
label(data$data_fu_aritmia_maggiore)="Date of Major arrhythmia"
label(data$gi_bleeding_fu)="Gastrointestinal Bleeding"
label(data$data_gi_bleeding_fu)="Date of Gastrointestinal Bleeding"
label(data$fu_altri_interventi_chirurgici)="Other Surgical Interventions"
label(data$data_altri_interventi_fu)="Date of Other Surgical Interventions"
label(data$tipo_altro_intervento)="Other Surgical Interventions Description"
label(data$fu_neoplasia)="Neoplasia"
label(data$neoplasia_type)="Neoplasia type"
label(data$altra_complicanza)="Altra complicanza"
label(data$nit)="Heart Transplant Listing?"
label(data$data_nit)="Listing date"
label(data$follow_up_complete)="Complete?"
label(data$li_event_date)="Data infezione"
label(data$li_infection_site)="Sede infezione"
label(data$li_infection_site_other)="Specifica sede infezione"
label(data$li_sbsi)="Specifica sede batteriemia secondaria"
label(data$li_sbsi_other)="Specifica altra batteriemia secondaria"
label(data$li_lvad_infection)="LVAD-specific infection"
label(data$li_lvad_infection_other)="Specifica sede infezione"
label(data$li_sepsi)="Sepsi?"
label(data$li_microorganism)="Microorganismo isolato"
label(data$li_microorganism_other)="Specifica microorganismo isolato"
label(data$li_microorganism_2)="Microorganismo isolato"
label(data$li_microorganism_other_2)="Specifica microorganismo isolato"
label(data$li_microorganism_3)="Microorganismo isolato"
label(data$li_microorganism_other_3)="Specifica microorganismo isolato"
label(data$li_mdro)="MDRO"
label(data$li_mdro_other)="Specifica MDRO"
label(data$li_cultures)="Tipo di isolamento"
label(data$li_cultures_other)="Specifica tipo di isolamento"
label(data$li_atb_1)="Antibiotico 1"
label(data$li_atb_1_other)="Specifica antibiotico 1"
label(data$li_atb_1_start)="Inizio terapia"
label(data$li_atb_1_end)="Fine terapia"
label(data$li_atb_2)="Antibiotico 2"
label(data$li_atb_2_other)="Specifica antibiotico 2"
label(data$li_atb_2_start)="Inizio terapia"
label(data$li_atb_2_end)="Fine terapia"
label(data$li_atb_3)="Antibiotico 3"
label(data$li_atb_3_other)="Specifica antibiotico 3"
label(data$li_atb_3_start)="Inizio terapia"
label(data$li_atb_3_end)="Fine terapia"
label(data$li_atb_4)="Antibiotico 4"
label(data$li_atb_4_other)="Specifica antibiotico 4"
label(data$li_atb_4_start)="Inizio terapia"
label(data$li_atb_4_end)="Fine terapia"
label(data$li_infection_sheet_comments)="Commenti"
label(data$infezioni_lvad_complete)="Complete?"
label(data$htx_date)="Heart Transplant Date"
label(data$htx_urgent)="Tx in urgenza?"
label(data$htx_urgent_reason)="Motivo urgenza"
label(data$htx_urgent_reason_other)="Specificare motivo urgenza"
label(data$admission_date)="Data inizio ricovero per TX"
label(data$discharge_date)="Data dimissione ricovero TX"
label(data$htx_induction)="Induzione al trapianto "
label(data$htx_induction_other)="Specificare induzione al trapianto"
label(data$immunotherapy___1)="Terapia immunosoppressiva  (choice=Ciclosporina)"
label(data$immunotherapy___2)="Terapia immunosoppressiva  (choice=Micofenolato)"
label(data$immunotherapy___3)="Terapia immunosoppressiva  (choice=Tacrolimus)"
label(data$immunotherapy___4)="Terapia immunosoppressiva  (choice=Everolimus)"
label(data$immunotherapy___5)="Terapia immunosoppressiva  (choice=Sirolimus)"
label(data$immunotherapy___6)="Terapia immunosoppressiva  (choice=Steroide)"
label(data$immunotherapy___7)="Terapia immunosoppressiva  (choice=Betalecept)"
label(data$immunotherapy___8)="Terapia immunosoppressiva  (choice=Altro)"
label(data$immunotherapy_other)="Specificare terapia immunosoppressiva "
label(data$cmv_recipient)="Sierologia CMV ricevente"
label(data$cmv_donor)="Sierologia CMV donatore"
label(data$transplant_notes)="Note"
label(data$transplant_information_complete)="Complete?"
label(data$ht_event_date)="Data infezione"
label(data$ht_infection_site)="Sede infezione"
label(data$ht_sbsi)="Specifica sede batteriemia secondaria"
label(data$ht_sbsi_other)="Specifica altra batteriemia secondaria"
label(data$ht_sofa)="Sepsi (SOFA)"
label(data$ht_microorganism)="Microorganismo isolato"
label(data$ht_mdro)="MDRO"
label(data$ht_mdro_other)="Specifica MDRO"
label(data$ht_cultures)="Tipo di isolamento"
label(data$ht_cultures_other)="Specifica tipo di isolamento"
label(data$ht_atb_1)="Antibiotico 1"
label(data$ht_atb_1_other)="Specifica antibiotico 1"
label(data$ht_atb_1_start)="Inizio terapia"
label(data$ht_atb_1_end)="Fine terapia"
label(data$ht_atb_2)="Antibiotico 2"
label(data$ht_atb_2_other)="Specifica antibiotico 2"
label(data$ht_atb_2_start)="Inizio terapia"
label(data$ht_atb_2_end)="Fine terapia"
label(data$ht_atb_3)="Antibiotico 3"
label(data$ht_atb_3_other)="Specifica antibiotico 3"
label(data$ht_atb_3_start)="Inizio terapia"
label(data$ht_atb_3_end)="Fine terapia"
label(data$ht_cmv_reactivation)="Riattivazione CMV"
label(data$ht_cmv_date)="Data riattivazione CMV"
label(data$ht_cmv_dna)="CMV DNA  (UI) allavvio tp"
label(data$ht_cmv_therapy)="Terapia CMV"
label(data$ht_cmv_therapy_start)="Data inizio terapia CMV"
label(data$ht_cmv_therapy_end)="Data fine terapia CMV"
label(data$ht_acute_rejection)="Rigetto acuto"
label(data$ht_ar_therapy___1)="Terapia rigetto (choice=Steroide endovena)"
label(data$ht_ar_therapy___2)="Terapia rigetto (choice=Steroide per os)"
label(data$ht_ar_therapy___3)="Terapia rigetto (choice=Timoglobuline)"
label(data$ht_ar_therapy___4)="Terapia rigetto (choice=Altro)"
label(data$ht_ar_therapy_other)="Specifica altro "
label(data$ht_ar_therapy_dose)="Dosaggio terapia antirigetto "
label(data$ht_ar_therapy_date)="Data somministrazione terapia antirigetto "
label(data$ht_infection_sheet_notes)="Note"
label(data$infezioni_htx_complete)="Complete?"
label(data$lastfup)="Last Follow Up"
label(data$death_date)="Death Date"
label(data$death_cause)="Cause of death (descriptive)"
label(data$status)="Status"
label(data$survival_data_complete)="Complete?"
#Setting Units

units(data$height)="cm"
units(data$weight)="kilograms"
units(data$bmi)="kilograms"

#Setting Factors(will create new variable for factors)
data$redcap_repeat_instrument.factor = factor(data$redcap_repeat_instrument,levels=c("infezioni_lvad","infezioni_htx"))
data$sex.factor = factor(data$sex,levels=c("0","1"))
data$intermacs.factor = factor(data$intermacs,levels=c("1","2","3","4","5","6","7"))
data$lvad_mod.factor = factor(data$lvad_mod,levels=c("1","2","3","4","5"))
data$lvad_ind.factor = factor(data$lvad_ind,levels=c("1","2","3","4"))
data$cmp_aethiology.factor = factor(data$cmp_aethiology,levels=c("1","2","3","4","5","6","7","8","9"))
data$demographics_complete.factor = factor(data$demographics_complete,levels=c("0","1","2"))
data$hyper.factor = factor(data$hyper,levels=c("1","0"))
data$dyslip.factor = factor(data$dyslip,levels=c("1","0"))
data$diabetes.factor = factor(data$diabetes,levels=c("1","0"))
data$renal_insuff.factor = factor(data$renal_insuff,levels=c("1","0"))
data$renal_stadiation.factor = factor(data$renal_stadiation,levels=c("1","2","3","4","5","6"))
data$smoke.factor = factor(data$smoke,levels=c("1","0"))
data$drugs.factor = factor(data$drugs,levels=c("1","0"))
data$coronary_dis.factor = factor(data$coronary_dis,levels=c("1","0"))
data$coronary_int___1.factor = factor(data$coronary_int___1,levels=c("0","1"))
data$coronary_int___2.factor = factor(data$coronary_int___2,levels=c("0","1"))
data$coronary_int___3.factor = factor(data$coronary_int___3,levels=c("0","1"))
data$infarction.factor = factor(data$infarction,levels=c("0","1","2"))
data$arrhyt.factor = factor(data$arrhyt,levels=c("1","0"))
data$arrhyt_type___1.factor = factor(data$arrhyt_type___1,levels=c("0","1"))
data$arrhyt_type___2.factor = factor(data$arrhyt_type___2,levels=c("0","1"))
data$arrhyt_type___3.factor = factor(data$arrhyt_type___3,levels=c("0","1"))
data$arrhyt_type___4.factor = factor(data$arrhyt_type___4,levels=c("0","1"))
data$valve_rep.factor = factor(data$valve_rep,levels=c("1","0"))
data$pm.factor = factor(data$pm,levels=c("1","0"))
data$resp_dis.factor = factor(data$resp_dis,levels=c("1","0"))
data$resp_dis_type___1.factor = factor(data$resp_dis_type___1,levels=c("0","1"))
data$resp_dis_type___2.factor = factor(data$resp_dis_type___2,levels=c("0","1"))
data$resp_dis_type___3.factor = factor(data$resp_dis_type___3,levels=c("0","1"))
data$resp_dis_type___5.factor = factor(data$resp_dis_type___5,levels=c("0","1"))
data$resp_dis_type___4.factor = factor(data$resp_dis_type___4,levels=c("0","1"))
data$neuro_hist.factor = factor(data$neuro_hist,levels=c("1","0"))
data$neuro_type___1.factor = factor(data$neuro_type___1,levels=c("0","1"))
data$neuro_type___2.factor = factor(data$neuro_type___2,levels=c("0","1"))
data$neuro_type___3.factor = factor(data$neuro_type___3,levels=c("0","1"))
data$neuro_type___4.factor = factor(data$neuro_type___4,levels=c("0","1"))
data$neuro_type___5.factor = factor(data$neuro_type___5,levels=c("0","1"))
data$neoplasia.factor = factor(data$neoplasia,levels=c("1","0"))
data$surgery.factor = factor(data$surgery,levels=c("1","0"))
data$sternotomy.factor = factor(data$sternotomy,levels=c("1","0"))
data$sternotomy_n.factor = factor(data$sternotomy_n,levels=c("1","2"))
data$medical_history_complete.factor = factor(data$medical_history_complete,levels=c("0","1","2"))
data$presurgery_laboratory_exam_complete.factor = factor(data$presurgery_laboratory_exam_complete,levels=c("0","1","2"))
data$rhc_tmcs.factor = factor(data$rhc_tmcs,levels=c("1","0"))
data$rhc_intrp.factor = factor(data$rhc_intrp,levels=c("1","0"))
data$rhc_vsprs.factor = factor(data$rhc_vsprs,levels=c("1","0"))
data$rhc_snp_intrp.factor = factor(data$rhc_snp_intrp,levels=c("1","0"))
data$right_heart_catheterization_complete.factor = factor(data$right_heart_catheterization_complete,levels=c("0","1","2"))
data$echo_mr.factor = factor(data$echo_mr,levels=c("0","1","2","3","4"))
data$echo_tr.factor = factor(data$echo_tr,levels=c("0","1","2","3","4"))
data$echo_ar.factor = factor(data$echo_ar,levels=c("0","1","2","3","4"))
data$echo_rvdysfunction.factor = factor(data$echo_rvdysfunction,levels=c("1","0"))
data$nearest_echocardiogram_to_rhc_complete.factor = factor(data$nearest_echocardiogram_to_rhc_complete,levels=c("0","1","2"))
data$intrp_pre.factor = factor(data$intrp_pre,levels=c("1","0"))
data$intrp_drug_pre___1.factor = factor(data$intrp_drug_pre___1,levels=c("0","1"))
data$intrp_drug_pre___2.factor = factor(data$intrp_drug_pre___2,levels=c("0","1"))
data$intrp_drug_pre___3.factor = factor(data$intrp_drug_pre___3,levels=c("0","1"))
data$intrp_drug_pre___4.factor = factor(data$intrp_drug_pre___4,levels=c("0","1"))
data$intrp_drug_pre___5.factor = factor(data$intrp_drug_pre___5,levels=c("0","1"))
data$intrp_drug_pre___6.factor = factor(data$intrp_drug_pre___6,levels=c("0","1"))
data$intrp_drug_admin___1.factor = factor(data$intrp_drug_admin___1,levels=c("0","1"))
data$intrp_drug_admin___2.factor = factor(data$intrp_drug_admin___2,levels=c("0","1"))
data$mcs.factor = factor(data$mcs,levels=c("1","0"))
data$mcs_type___0.factor = factor(data$mcs_type___0,levels=c("0","1"))
data$mcs_type___1.factor = factor(data$mcs_type___1,levels=c("0","1"))
data$mcs_type___2.factor = factor(data$mcs_type___2,levels=c("0","1"))
data$mcs_type___3.factor = factor(data$mcs_type___3,levels=c("0","1"))
data$mcs_type___4.factor = factor(data$mcs_type___4,levels=c("0","1"))
data$intrp_post.factor = factor(data$intrp_post,levels=c("1","0"))
data$intrp_drug_post___1.factor = factor(data$intrp_drug_post___1,levels=c("0","1"))
data$intrp_drug_post___2.factor = factor(data$intrp_drug_post___2,levels=c("0","1"))
data$intrp_drug_post___3.factor = factor(data$intrp_drug_post___3,levels=c("0","1"))
data$intrp_drug_post___4.factor = factor(data$intrp_drug_post___4,levels=c("0","1"))
data$intrp_drug_post___5.factor = factor(data$intrp_drug_post___5,levels=c("0","1"))
data$intrp_drug_post___6.factor = factor(data$intrp_drug_post___6,levels=c("0","1"))
data$mcs_post.factor = factor(data$mcs_post,levels=c("1","0"))
data$mcs_type_post___0.factor = factor(data$mcs_type_post___0,levels=c("0","1"))
data$mcs_type_post___1.factor = factor(data$mcs_type_post___1,levels=c("0","1"))
data$mcs_type_post___2.factor = factor(data$mcs_type_post___2,levels=c("0","1"))
data$mcs_type_post___4.factor = factor(data$mcs_type_post___4,levels=c("0","1"))
data$prolonged_mv.factor = factor(data$prolonged_mv,levels=c("1","0"))
data$ino.factor = factor(data$ino,levels=c("1","0"))
data$tracheostomy.factor = factor(data$tracheostomy,levels=c("1","0"))
data$crrt.factor = factor(data$crrt,levels=c("1","0"))
data$perioperative_support_and_icu_course_complete.factor = factor(data$perioperative_support_and_icu_course_complete,levels=c("0","1","2"))
data$bleed.factor = factor(data$bleed,levels=c("1","0"))
data$infection.factor = factor(data$infection,levels=c("1","0"))
data$neuro.factor = factor(data$neuro,levels=c("1","0"))
data$pumpdisf.factor = factor(data$pumpdisf,levels=c("1","0"))
data$hturgent.factor = factor(data$hturgent,levels=c("1","0"))
data$h_death.factor = factor(data$h_death,levels=c("1","0"))
data$h_death_reason___1.factor = factor(data$h_death_reason___1,levels=c("0","1"))
data$h_death_reason___2.factor = factor(data$h_death_reason___2,levels=c("0","1"))
data$h_death_reason___3.factor = factor(data$h_death_reason___3,levels=c("0","1"))
data$h_death_reason___4.factor = factor(data$h_death_reason___4,levels=c("0","1"))
data$h_death_reason___5.factor = factor(data$h_death_reason___5,levels=c("0","1"))
data$h_death_reason___6.factor = factor(data$h_death_reason___6,levels=c("0","1"))
data$h_death_reason___7.factor = factor(data$h_death_reason___7,levels=c("0","1"))
data$h_death_reason___8.factor = factor(data$h_death_reason___8,levels=c("0","1"))
data$h_death_reason___9.factor = factor(data$h_death_reason___9,levels=c("0","1"))
data$h_death_reason___10.factor = factor(data$h_death_reason___10,levels=c("0","1"))
data$h_death_reason___11.factor = factor(data$h_death_reason___11,levels=c("0","1"))
data$h_death_reason___12.factor = factor(data$h_death_reason___12,levels=c("0","1"))
data$h_death_reason___13.factor = factor(data$h_death_reason___13,levels=c("0","1"))
data$h_death_reason___14.factor = factor(data$h_death_reason___14,levels=c("0","1"))
data$h_death_reason___15.factor = factor(data$h_death_reason___15,levels=c("0","1"))
data$early_rv_failure.factor = factor(data$early_rv_failure,levels=c("1","0"))
data$late_rv_failure.factor = factor(data$late_rv_failure,levels=c("1","0"))
data$in_hospital_outcomes_complete.factor = factor(data$in_hospital_outcomes_complete,levels=c("0","1","2"))
data$fu_rv_failure.factor = factor(data$fu_rv_failure,levels=c("1","0"))
data$fu_vad_trombosi.factor = factor(data$fu_vad_trombosi,levels=c("1","0"))
data$fu_stroke.factor = factor(data$fu_stroke,levels=c("1","0"))
data$fu_emorragia_cerebrale.factor = factor(data$fu_emorragia_cerebrale,levels=c("1","0"))
data$fu_aritmia_maggiore.factor = factor(data$fu_aritmia_maggiore,levels=c("1","0"))
data$gi_bleeding_fu.factor = factor(data$gi_bleeding_fu,levels=c("1","0"))
data$fu_altri_interventi_chirurgici.factor = factor(data$fu_altri_interventi_chirurgici,levels=c("1","0"))
data$fu_neoplasia.factor = factor(data$fu_neoplasia,levels=c("1","0"))
data$nit.factor = factor(data$nit,levels=c("1","0"))
data$follow_up_complete.factor = factor(data$follow_up_complete,levels=c("0","1","2"))
data$li_infection_site.factor = factor(data$li_infection_site,levels=c("1","2","3","4","5","6","7","8","9","10","11","12"))
data$li_sbsi.factor = factor(data$li_sbsi,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13"))
data$li_lvad_infection.factor = factor(data$li_lvad_infection,levels=c("1","2","3","4","5"))
data$li_sepsi.factor = factor(data$li_sepsi,levels=c("1","0"))
data$li_microorganism.factor = factor(data$li_microorganism,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"))
data$li_microorganism_2.factor = factor(data$li_microorganism_2,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"))
data$li_microorganism_3.factor = factor(data$li_microorganism_3,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"))
data$li_mdro.factor = factor(data$li_mdro,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13"))
data$li_cultures.factor = factor(data$li_cultures,levels=c("1","2","3"))
data$li_atb_1.factor = factor(data$li_atb_1,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"))
data$li_atb_2.factor = factor(data$li_atb_2,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"))
data$li_atb_3.factor = factor(data$li_atb_3,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"))
data$li_atb_4.factor = factor(data$li_atb_4,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"))
data$infezioni_lvad_complete.factor = factor(data$infezioni_lvad_complete,levels=c("0","1","2"))
data$htx_urgent.factor = factor(data$htx_urgent,levels=c("1","0"))
data$htx_urgent_reason.factor = factor(data$htx_urgent_reason,levels=c("1","2","3"))
data$htx_induction.factor = factor(data$htx_induction,levels=c("1","2","3","4","5"))
data$immunotherapy___1.factor = factor(data$immunotherapy___1,levels=c("0","1"))
data$immunotherapy___2.factor = factor(data$immunotherapy___2,levels=c("0","1"))
data$immunotherapy___3.factor = factor(data$immunotherapy___3,levels=c("0","1"))
data$immunotherapy___4.factor = factor(data$immunotherapy___4,levels=c("0","1"))
data$immunotherapy___5.factor = factor(data$immunotherapy___5,levels=c("0","1"))
data$immunotherapy___6.factor = factor(data$immunotherapy___6,levels=c("0","1"))
data$immunotherapy___7.factor = factor(data$immunotherapy___7,levels=c("0","1"))
data$immunotherapy___8.factor = factor(data$immunotherapy___8,levels=c("0","1"))
data$cmv_recipient.factor = factor(data$cmv_recipient,levels=c("0","1"))
data$cmv_donor.factor = factor(data$cmv_donor,levels=c("0","1"))
data$transplant_information_complete.factor = factor(data$transplant_information_complete,levels=c("0","1","2"))
data$ht_infection_site.factor = factor(data$ht_infection_site,levels=c("1","2","3","4","5","6","7","8","9","10","11"))
data$ht_sbsi.factor = factor(data$ht_sbsi,levels=c("1","2","3","4","5","6","7","8","9","10","11","12"))
data$ht_sofa.factor = factor(data$ht_sofa,levels=c("1","0"))
data$ht_microorganism.factor = factor(data$ht_microorganism,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"))
data$ht_mdro.factor = factor(data$ht_mdro,levels=c("1","2","3","4","5","6","14","7","8","9","10","11","12","13"))
data$ht_cultures.factor = factor(data$ht_cultures,levels=c("1","2","4","5","6","7","8","9","10","11","3"))
data$ht_atb_1.factor = factor(data$ht_atb_1,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"))
data$ht_atb_2.factor = factor(data$ht_atb_2,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"))
data$ht_atb_3.factor = factor(data$ht_atb_3,levels=c("1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46"))
data$ht_cmv_reactivation.factor = factor(data$ht_cmv_reactivation,levels=c("1","0"))
data$ht_cmv_therapy.factor = factor(data$ht_cmv_therapy,levels=c("1","2","3","4","5"))
data$ht_acute_rejection.factor = factor(data$ht_acute_rejection,levels=c("1","0"))
data$ht_ar_therapy___1.factor = factor(data$ht_ar_therapy___1,levels=c("0","1"))
data$ht_ar_therapy___2.factor = factor(data$ht_ar_therapy___2,levels=c("0","1"))
data$ht_ar_therapy___3.factor = factor(data$ht_ar_therapy___3,levels=c("0","1"))
data$ht_ar_therapy___4.factor = factor(data$ht_ar_therapy___4,levels=c("0","1"))
data$infezioni_htx_complete.factor = factor(data$infezioni_htx_complete,levels=c("0","1","2"))
data$status.factor = factor(data$status,levels=c("0","1"))
data$survival_data_complete.factor = factor(data$survival_data_complete,levels=c("0","1","2"))

levels(data$redcap_repeat_instrument.factor)=c("Infezioni Lvad","Infezioni Htx")
levels(data$sex.factor)=c("Male","Female")
levels(data$intermacs.factor)=c("1. Critical cardiogenic shock","2. Progressive decline on inotropic support","3. Stable but inotrope dependent","4. Resting symptoms home on oral therapy","5. Exertion intolerant","6. Exertion limited","7. Advanced NYHA Class III symptoms")
levels(data$lvad_mod.factor)=c("HeartMate 2","HeartWare HVAD","HeartMate 3","Reliant AVAD","Incor Berlin Heart")
levels(data$lvad_ind.factor)=c("BTT - Bridge to Transplant","DT - Destination Therapy","BTC - Bridge to Candidacy","BTR - Bridge to Recovery")
levels(data$cmp_aethiology.factor)=c("Ischemic","Valvular","DCM","Inflammatory cardiomyopathy","Restrictive","Arrhythmogenic Right Ventricular Cardiomyopathy (ARVC)","Tachicardiomyopathy","Hypertrophic  Cardiomyopathy","Radiation-induced cardiomyopathy")
levels(data$demographics_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$hyper.factor)=c("Yes","No")
levels(data$dyslip.factor)=c("Yes","No")
levels(data$diabetes.factor)=c("Yes","No")
levels(data$renal_insuff.factor)=c("Yes","No")
levels(data$renal_stadiation.factor)=c("1","2","3a","3b","4","5")
levels(data$smoke.factor)=c("Yes","No")
levels(data$drugs.factor)=c("Yes","No")
levels(data$coronary_dis.factor)=c("Yes","No")
levels(data$coronary_int___1.factor)=c("Unchecked","Checked")
levels(data$coronary_int___2.factor)=c("Unchecked","Checked")
levels(data$coronary_int___3.factor)=c("Unchecked","Checked")
levels(data$infarction.factor)=c("no","< 90 gg",">90 gg")
levels(data$arrhyt.factor)=c("Yes","No")
levels(data$arrhyt_type___1.factor)=c("Unchecked","Checked")
levels(data$arrhyt_type___2.factor)=c("Unchecked","Checked")
levels(data$arrhyt_type___3.factor)=c("Unchecked","Checked")
levels(data$arrhyt_type___4.factor)=c("Unchecked","Checked")
levels(data$valve_rep.factor)=c("Yes","No")
levels(data$pm.factor)=c("Yes","No")
levels(data$resp_dis.factor)=c("Yes","No")
levels(data$resp_dis_type___1.factor)=c("Unchecked","Checked")
levels(data$resp_dis_type___2.factor)=c("Unchecked","Checked")
levels(data$resp_dis_type___3.factor)=c("Unchecked","Checked")
levels(data$resp_dis_type___5.factor)=c("Unchecked","Checked")
levels(data$resp_dis_type___4.factor)=c("Unchecked","Checked")
levels(data$neuro_hist.factor)=c("Yes","No")
levels(data$neuro_type___1.factor)=c("Unchecked","Checked")
levels(data$neuro_type___2.factor)=c("Unchecked","Checked")
levels(data$neuro_type___3.factor)=c("Unchecked","Checked")
levels(data$neuro_type___4.factor)=c("Unchecked","Checked")
levels(data$neuro_type___5.factor)=c("Unchecked","Checked")
levels(data$neoplasia.factor)=c("Yes","No")
levels(data$surgery.factor)=c("Yes","No")
levels(data$sternotomy.factor)=c("Yes","No")
levels(data$sternotomy_n.factor)=c("1",">1")
levels(data$medical_history_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$presurgery_laboratory_exam_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$rhc_tmcs.factor)=c("Yes","No")
levels(data$rhc_intrp.factor)=c("Yes","No")
levels(data$rhc_vsprs.factor)=c("Yes","No")
levels(data$rhc_snp_intrp.factor)=c("Yes","No")
levels(data$right_heart_catheterization_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$echo_mr.factor)=c("none/trace","mild","moderate","moderate-to-severe","severe")
levels(data$echo_tr.factor)=c("none/trace","mild","moderate","moderate-to-severe","severe")
levels(data$echo_ar.factor)=c("none/trace","mild","moderate","moderate-to-severe","severe")
levels(data$echo_rvdysfunction.factor)=c("Yes","No")
levels(data$nearest_echocardiogram_to_rhc_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$intrp_pre.factor)=c("Yes","No")
levels(data$intrp_drug_pre___1.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_pre___2.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_pre___3.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_pre___4.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_pre___5.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_pre___6.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_admin___1.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_admin___2.factor)=c("Unchecked","Checked")
levels(data$mcs.factor)=c("Yes","No")
levels(data$mcs_type___0.factor)=c("Unchecked","Checked")
levels(data$mcs_type___1.factor)=c("Unchecked","Checked")
levels(data$mcs_type___2.factor)=c("Unchecked","Checked")
levels(data$mcs_type___3.factor)=c("Unchecked","Checked")
levels(data$mcs_type___4.factor)=c("Unchecked","Checked")
levels(data$intrp_post.factor)=c("Yes","No")
levels(data$intrp_drug_post___1.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_post___2.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_post___3.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_post___4.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_post___5.factor)=c("Unchecked","Checked")
levels(data$intrp_drug_post___6.factor)=c("Unchecked","Checked")
levels(data$mcs_post.factor)=c("Yes","No")
levels(data$mcs_type_post___0.factor)=c("Unchecked","Checked")
levels(data$mcs_type_post___1.factor)=c("Unchecked","Checked")
levels(data$mcs_type_post___2.factor)=c("Unchecked","Checked")
levels(data$mcs_type_post___4.factor)=c("Unchecked","Checked")
levels(data$prolonged_mv.factor)=c("Yes","No")
levels(data$ino.factor)=c("Yes","No")
levels(data$tracheostomy.factor)=c("Yes","No")
levels(data$crrt.factor)=c("Yes","No")
levels(data$perioperative_support_and_icu_course_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$bleed.factor)=c("Yes","No")
levels(data$infection.factor)=c("Yes","No")
levels(data$neuro.factor)=c("Yes","No")
levels(data$pumpdisf.factor)=c("Yes","No")
levels(data$hturgent.factor)=c("Yes","No")
levels(data$h_death.factor)=c("Yes","No")
levels(data$h_death_reason___1.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___2.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___3.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___4.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___5.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___6.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___7.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___8.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___9.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___10.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___11.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___12.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___13.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___14.factor)=c("Unchecked","Checked")
levels(data$h_death_reason___15.factor)=c("Unchecked","Checked")
levels(data$early_rv_failure.factor)=c("Yes","No")
levels(data$late_rv_failure.factor)=c("Yes","No")
levels(data$in_hospital_outcomes_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$fu_rv_failure.factor)=c("Yes","No")
levels(data$fu_vad_trombosi.factor)=c("Yes","No")
levels(data$fu_stroke.factor)=c("Yes","No")
levels(data$fu_emorragia_cerebrale.factor)=c("Yes","No")
levels(data$fu_aritmia_maggiore.factor)=c("Yes","No")
levels(data$gi_bleeding_fu.factor)=c("Yes","No")
levels(data$fu_altri_interventi_chirurgici.factor)=c("Yes","No")
levels(data$fu_neoplasia.factor)=c("Yes","No")
levels(data$nit.factor)=c("Yes","No")
levels(data$follow_up_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$li_infection_site.factor)=c("Batteriemia primaria (pBSI)","Batteriemia secondaria (sBSI)","L-VAD specific infection","Cute e tessuti molli (non L-VAD relata)","Tratto gastro enterico","Intra-addominale","Sito chirurgico (non L-VAD relata)","SNC","Genitali","Osteomielite, infezione di protesi articolare","Polmonite","Altro")
levels(data$li_sbsi.factor)=c("Catetere vascolare (CLABSI)","L-VAD specific infection","Endocardite non LVAD relata (?)","Cute e tessuti molli (non L-VAD relata)","Tratto gastro enterico","Intra-addominale","Sito chirurgico (non L-VAD relata)","SNC","Genitali","Osteomielite, infezione di protesi articolare","Polmonite","Infezione delle vie urinarie","Altro")
levels(data$li_lvad_infection.factor)=c("Pompa, tasca, cannula","Driveline","Mediastinite / Osteomielite","Endocardite","Altro")
levels(data$li_sepsi.factor)=c("Yes","No")
levels(data$li_microorganism.factor)=c("Achromobacter xyloxidans","Acinetobacter baumannii complex","Aerococcus spp","Aeromonas spp.","Bacteroides spp.","Brucella spp.","Burkholderia cepacia complex","Chlamydia penumoniae","Citrobacter spp","Clostridioides difficile","Clostridioides spp.","Corynebacterium spp.","Enterobacter cloacae","Enterobacter spp.","Entertococcus faecalis","Enterococcus faecium","Enterococcus spp.","Escherichia coli","Haemophilus influnzae","Klebsiella pneumoniae","Legionalla penumophila","Listeria monocytogenes","Micrococcus spp.","Morganella spp.","Mycoplasma pneumoniae","Neisseria gonorrhoeae","Neisseria meningitidis","Prevotella spp","Proteus spp.","Providencia spp.","Pseudomonas aeruginosa","Pseudomonas spp.","Raoultella spp.","Serratia marcescens","Staphylococcus aureus","Staphylococcus capitis","Staphylococcus caprae","Staphylococcus epidermidis","Staphylococcus gallinarum","Staphylococcus haemolyticus","Staphylococcus hominis","Staphylococcus intermedius","Staphylococcus lugdunensis","Staphylococcus sapophyticus","Staphylococcus warneri","Stenotrophomonas maltophilia","Streptococcus agalactiae","Streptococcus anginosus","Streptococcus constellatus","Streptococcus gallolyticus","Streptococcus dysgalactiae","Streptococcus infantarius","Streptococcus sanguinis","Streptococcus suis","Streptococcus mitis","Streptococcus pneumoniae","Streptococcus mutans","Vibrio spp.","Candida albicans","Candida parapsilosis","Candida tropicalis","Candida galbrata","Candida krusei","Candida","Aspergillus fumigatus","Aspergillus niger","Altro")
levels(data$li_microorganism_2.factor)=c("Achromobacter xyloxidans","Acinetobacter baumannii complex","Aerococcus spp","Aeromonas spp.","Bacteroides spp.","Brucella spp.","Burkholderia cepacia complex","Chlamydia penumoniae","Citrobacter spp","Clostridioides difficile","Clostridioides spp.","Corynebacterium spp.","Enterobacter cloacae","Enterobacter spp.","Entertococcus faecalis","Enterococcus faecium","Enterococcus spp.","Escherichia coli","Haemophilus influnzae","Klebsiella pneumoniae","Legionalla penumophila","Listeria monocytogenes","Micrococcus spp.","Morganella spp.","Mycoplasma pneumoniae","Neisseria gonorrhoeae","Neisseria meningitidis","Prevotella spp","Proteus spp.","Providencia spp.","Pseudomonas aeruginosa","Pseudomonas spp.","Raoultella spp.","Serratia marcescens","Staphylococcus aureus","Staphylococcus capitis","Staphylococcus caprae","Staphylococcus epidermidis","Staphylococcus gallinarum","Staphylococcus haemolyticus","Staphylococcus hominis","Staphylococcus intermedius","Staphylococcus lugdunensis","Staphylococcus sapophyticus","Staphylococcus warneri","Stenotrophomonas maltophilia","Streptococcus agalactiae","Streptococcus anginosus","Streptococcus constellatus","Streptococcus gallolyticus","Streptococcus dysgalactiae","Streptococcus infantarius","Streptococcus sanguinis","Streptococcus suis","Streptococcus mitis","Streptococcus pneumoniae","Streptococcus mutans","Vibrio spp.","Candida albicans","Candida parapsilosis","Candida tropicalis","Candida galbrata","Candida krusei","Candida","Aspergillus fumigatus","Aspergillus niger","Altro")
levels(data$li_microorganism_3.factor)=c("Achromobacter xyloxidans","Acinetobacter baumannii complex","Aerococcus spp","Aeromonas spp.","Bacteroides spp.","Brucella spp.","Burkholderia cepacia complex","Chlamydia penumoniae","Citrobacter spp","Clostridioides difficile","Clostridioides spp.","Corynebacterium spp.","Enterobacter cloacae","Enterobacter spp.","Entertococcus faecalis","Enterococcus faecium","Enterococcus spp.","Escherichia coli","Haemophilus influnzae","Klebsiella pneumoniae","Legionalla penumophila","Listeria monocytogenes","Micrococcus spp.","Morganella spp.","Mycoplasma pneumoniae","Neisseria gonorrhoeae","Neisseria meningitidis","Prevotella spp","Proteus spp.","Providencia spp.","Pseudomonas aeruginosa","Pseudomonas spp.","Raoultella spp.","Serratia marcescens","Staphylococcus aureus","Staphylococcus capitis","Staphylococcus caprae","Staphylococcus epidermidis","Staphylococcus gallinarum","Staphylococcus haemolyticus","Staphylococcus hominis","Staphylococcus intermedius","Staphylococcus lugdunensis","Staphylococcus sapophyticus","Staphylococcus warneri","Stenotrophomonas maltophilia","Streptococcus agalactiae","Streptococcus anginosus","Streptococcus constellatus","Streptococcus gallolyticus","Streptococcus dysgalactiae","Streptococcus infantarius","Streptococcus sanguinis","Streptococcus suis","Streptococcus mitis","Streptococcus pneumoniae","Streptococcus mutans","Vibrio spp.","Candida albicans","Candida parapsilosis","Candida tropicalis","Candida galbrata","Candida krusei","Candida","Aspergillus fumigatus","Aspergillus niger","Altro")
levels(data$li_mdro.factor)=c("CARBA-R (non carbapenemasi, Enterobacterales)","DTR (P.aeruginosa e A.baumannii)","ESBL","IMP","KPC","MRSA","Vancomicina R (non S.aureus)","Linezolid R","NDM","OXA-48","VIM","VRE","Altro")
levels(data$li_cultures.factor)=c("Tampone di ferita","Campionamento profondo in CO","Altro")
levels(data$li_atb_1.factor)=c("Amikacin","Amoxicillin","Ampicillin","Amoxicillin-clav","Ampicillin-sulb","Azithromycin","Aztreonam","Cefazolin","Cefepime","Cefiderocol","Cefitaxime","Ceftaroline","Ceftazidime","Ceftazidime-avibactam","Ceftobiprole","Ceftolozane-tazobactam","Ceftriaxone","Ciprofloxacin","Clarithromycin","Clindamycin","Colistin","Daptomycin","Dalbavacin","Doxycycline","Ertapenem","Fosomycin","Gentamicin","Imipenem","Imipenem-relebactam","Levofloxacin","Linezolid","Meropenem","Meropenem-vaborbactam","Nitrofurantoin","Oxaciliina","Piperacillin-tazobactam","Rifampin","Tigecyline","Tobramycin","Trimethroprim-Sulfamethoxazole","Vancomycin","Fluconazolo","Voriconazolo","Caspofungin","Amfotericin B","Altro")
levels(data$li_atb_2.factor)=c("Amikacin","Amoxicillin","Ampicillin","Amoxicillin-clav","Ampicillin-sulb","Azithromycin","Aztreonam","Cefazolin","Cefepime","Cefiderocol","Cefitaxime","Ceftaroline","Ceftazidime","Ceftazidime-avibactam","Ceftobiprole","Ceftolozane-tazobactam","Ceftriaxone","Ciprofloxacin","Clarithromycin","Clindamycin","Colistin","Daptomycin","Dalbavacin","Doxycycline","Ertapenem","Fosomycin","Gentamicin","Imipenem","Imipenem-relebactam","Levofloxacin","Linezolid","Meropenem","Meropenem-vaborbactam","Nitrofurantoin","Oxaciliina","Piperacillin-tazobactam","Rifampin","Tigecyline","Tobramycin","Trimethroprim-Sulfamethoxazole","Vancomycin","Fluconazolo","Voriconazolo","Caspofungin","Amfotericin B","Altro")
levels(data$li_atb_3.factor)=c("Amikacin","Amoxicillin","Ampicillin","Amoxicillin-clav","Ampicillin-sulb","Azithromycin","Aztreonam","Cefazolin","Cefepime","Cefiderocol","Cefitaxime","Ceftaroline","Ceftazidime","Ceftazidime-avibactam","Ceftobiprole","Ceftolozane-tazobactam","Ceftriaxone","Ciprofloxacin","Clarithromycin","Clindamycin","Colistin","Daptomycin","Dalbavacin","Doxycycline","Ertapenem","Fosomycin","Gentamicin","Imipenem","Imipenem-relebactam","Levofloxacin","Linezolid","Meropenem","Meropenem-vaborbactam","Nitrofurantoin","Oxaciliina","Piperacillin-tazobactam","Rifampin","Tigecyline","Tobramycin","Trimethroprim-Sulfamethoxazole","Vancomycin","Fluconazolo","Voriconazolo","Caspofungin","Amfotericin B","Altro")
levels(data$li_atb_4.factor)=c("Amikacin","Amoxicillin","Ampicillin","Amoxicillin-clav","Ampicillin-sulb","Azithromycin","Aztreonam","Cefazolin","Cefepime","Cefiderocol","Cefitaxime","Ceftaroline","Ceftazidime","Ceftazidime-avibactam","Ceftobiprole","Ceftolozane-tazobactam","Ceftriaxone","Ciprofloxacin","Clarithromycin","Clindamycin","Colistin","Daptomycin","Dalbavacin","Doxycycline","Ertapenem","Fosomycin","Gentamicin","Imipenem","Imipenem-relebactam","Levofloxacin","Linezolid","Meropenem","Meropenem-vaborbactam","Nitrofurantoin","Oxaciliina","Piperacillin-tazobactam","Rifampin","Tigecyline","Tobramycin","Trimethroprim-Sulfamethoxazole","Vancomycin","Fluconazolo","Voriconazolo","Caspofungin","Amfotericin B","Altro")
levels(data$infezioni_lvad_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$htx_urgent.factor)=c("Yes","No")
levels(data$htx_urgent_reason.factor)=c("Infezione","Disfunzione LVAD","Altro")
levels(data$htx_induction.factor)=c("Timoglobuline","Steroide","Ciclosporina","Tacrolimus","Altro")
levels(data$immunotherapy___1.factor)=c("Unchecked","Checked")
levels(data$immunotherapy___2.factor)=c("Unchecked","Checked")
levels(data$immunotherapy___3.factor)=c("Unchecked","Checked")
levels(data$immunotherapy___4.factor)=c("Unchecked","Checked")
levels(data$immunotherapy___5.factor)=c("Unchecked","Checked")
levels(data$immunotherapy___6.factor)=c("Unchecked","Checked")
levels(data$immunotherapy___7.factor)=c("Unchecked","Checked")
levels(data$immunotherapy___8.factor)=c("Unchecked","Checked")
levels(data$cmv_recipient.factor)=c("Negativa    (-)","Positiva     (+)")
levels(data$cmv_donor.factor)=c("Negativa    (-)","Positiva     (+)")
levels(data$transplant_information_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$ht_infection_site.factor)=c("Batteriemia primaria (pBSI)","Batteriemia secondaria (sBSI)","Infezioni del tratto gastro enterico","Infezione intra-addominale","Infezione di sito chirurgico","Infezione SNC","Infezioni genitali","Osteomielite, infezione di protesi articolare","Polmonite","Infezione delle vie urinarie","Altro")
levels(data$ht_sbsi.factor)=c("Catetere vascolare (CLABSI)","L-VAD related infection","Infezione cute e tessuti molli (non L-VAD relata)","Tratto gastro enterico","Intra-addominale","Sito chirurgico","SNC","Genitali","Osteomielite, infezione di protesi articolare","Polmonite","Infezione delle vie urinarie","Altro")
levels(data$ht_sofa.factor)=c("Yes","No")
levels(data$ht_microorganism.factor)=c("Achromobacter xyloxidans","Acinetobacter baumannii complex","Aerococcus spp","Aeromonas spp.","Bacteroides spp.","Brucella spp.","Burkholderia cepacia complex","Chlamydia penumoniae","Citrobacter spp","Clostridioides difficile","Clostridioides spp.","Corynebacterium spp.","Enterobacter cloacae","Enterobacter spp.","Entertococcus faecalis","Enterococcus faecium","Enterococcus spp.","Escherichia coli","Haemophilus influnzae","Klebsiella pneumoniae","Legionalla penumophila","Listeria monocytogenes","Micrococcus spp.","Morganella spp.","Mycoplasma pneumoniae","Neisseria gonorrhoeae","Neisseria meningitidis","Prevotella spp","Proteus spp.","Providencia spp.","Pseudomonas aeruginosa","Pseudomonas spp.","Raoultella spp.","Serratia marcescens","Staphylococcus aureus","Staphylococcus capitis","Staphylococcus caprae","Staphylococcus epidermidis","Staphylococcus gallinarum","Staphylococcus haemolyticus","Staphylococcus hominis","Staphylococcus intermedius","Staphylococcus lugdunensis","Staphylococcus sapophyticus","Staphylococcus warneri","Stenotrophomonas maltophilia","Streptococcus agalactiae","Streptococcus anginosus","Streptococcus constellatus","Streptococcus gallolyticus","Streptococcus dysgalactiae","Streptococcus infantarius","Streptococcus sanguinis","Streptococcus suis","Streptococcus mitis","Streptococcus pneumoniae","Streptococcus mutans","Vibrio spp.","Candida albicans","Candida parapsilosis","Candida tropicalis","Candida galbrata","Candida krusei","Candida","Aspergillus fumigatus","Aspergillus niger","Altro")
levels(data$ht_mdro.factor)=c("CARBA-R (non carbapenemasi, Enterobacterales)","DTR (P.aeruginosa e A.baumannii)","ESBL","IMP","KPC","MRSA","MRSE","Vancomicina R (non S.aureus)","Linezolid R","NDM","OXA-48","VIM","VRE","Altro")
levels(data$ht_cultures.factor)=c("Tampone di ferita","Campionamento profondo in CO","Urinocoltura","Coprocoltura","Emocoltura","Emocoltura catetere venoso centrale (CVC)","Emocoltura catetere arterioso","Broncolavaggio alveolare (BAL)","Broncoaspirato","Aspirato Endotracheale","Altro")
levels(data$ht_atb_1.factor)=c("Amikacin","Amoxicillin","Ampicillin","Amoxicillin-clav","Ampicillin-sulb","Azithromycin","Aztreonam","Cefazolin","Cefepime","Cefiderocol","Cefitaxime","Ceftaroline","Ceftazidime","Ceftazidime-avibactam","Ceftobiprole","Ceftolozane-tazobactam","Ceftriaxone","Ciprofloxacin","Clarithromycin","Clindamycin","Colistin","Daptomycin","Dalbavacin","Doxycycline","Ertapenem","Fosomycin","Gentamicin","Imipenem","Imipenem-relebactam","Levofloxacin","Linezolid","Meropenem","Meropenem-vaborbactam","Nitrofurantoin","Oxaciliina","Piperacillin-tazobactam","Rifampin","Tigecyline","Tobramycin","Trimethroprim-Sulfamethoxazole","Vancomycin","Fluconazolo","Voriconazolo","Caspofungin","Amfotericin B","Altro")
levels(data$ht_atb_2.factor)=c("Amikacin","Amoxicillin","Ampicillin","Amoxicillin-clav","Ampicillin-sulb","Azithromycin","Aztreonam","Cefazolin","Cefepime","Cefiderocol","Cefitaxime","Ceftaroline","Ceftazidime","Ceftazidime-avibactam","Ceftobiprole","Ceftolozane-tazobactam","Ceftriaxone","Ciprofloxacin","Clarithromycin","Clindamycin","Colistin","Daptomycin","Dalbavacin","Doxycycline","Ertapenem","Fosomycin","Gentamicin","Imipenem","Imipenem-relebactam","Levofloxacin","Linezolid","Meropenem","Meropenem-vaborbactam","Nitrofurantoin","Oxaciliina","Piperacillin-tazobactam","Rifampin","Tigecyline","Tobramycin","Trimethroprim-Sulfamethoxazole","Vancomycin","Fluconazolo","Voriconazolo","Caspofungin","Amfotericin B","Altro")
levels(data$ht_atb_3.factor)=c("Amikacin","Amoxicillin","Ampicillin","Amoxicillin-clav","Ampicillin-sulb","Azithromycin","Aztreonam","Cefazolin","Cefepime","Cefiderocol","Cefitaxime","Ceftaroline","Ceftazidime","Ceftazidime-avibactam","Ceftobiprole","Ceftolozane-tazobactam","Ceftriaxone","Ciprofloxacin","Clarithromycin","Clindamycin","Colistin","Daptomycin","Dalbavacin","Doxycycline","Ertapenem","Fosomycin","Gentamicin","Imipenem","Imipenem-relebactam","Levofloxacin","Linezolid","Meropenem","Meropenem-vaborbactam","Nitrofurantoin","Oxaciliina","Piperacillin-tazobactam","Rifampin","Tigecyline","Tobramycin","Trimethroprim-Sulfamethoxazole","Vancomycin","Fluconazolo","Voriconazolo","Caspofungin","Amfotericin B","Altro")
levels(data$ht_cmv_reactivation.factor)=c("Yes","No")
levels(data$ht_cmv_therapy.factor)=c("Ganciclovir","Valganciclovir","Foscarnet","Cidofovir","Maribavir")
levels(data$ht_acute_rejection.factor)=c("Yes","No")
levels(data$ht_ar_therapy___1.factor)=c("Unchecked","Checked")
levels(data$ht_ar_therapy___2.factor)=c("Unchecked","Checked")
levels(data$ht_ar_therapy___3.factor)=c("Unchecked","Checked")
levels(data$ht_ar_therapy___4.factor)=c("Unchecked","Checked")
levels(data$infezioni_htx_complete.factor)=c("Incomplete","Unverified","Complete")
levels(data$status.factor)=c("Vivo","Deceduto")
levels(data$survival_data_complete.factor)=c("Incomplete","Unverified","Complete")


```

```{r Data_manipulation}

############################
#### CONVERSION TO DATE ####
###########################

convert_to_date <- function(x) as.Date(x)

data <- data %>% 
  mutate(across(c(dob,lvad_date,lvad_redo_date,rhcdate,echo_date,intrp_start,mcs_start,icu_discharge,intrp_stop,mcs_stop,h_admission,h_discharge,data_scompenso_vd,data_fu_vad_trombosi,data_fu_stroke,date_fu_emorragia_cereb,data_fu_aritmia_maggiore,data_gi_bleeding_fu,data_altri_interventi_fu,data_nit,li_event_date,li_atb_1_start,li_atb_1_end,li_atb_2_start,li_atb_2_end,li_atb_3_start,li_atb_3_end,li_atb_4_start,li_atb_4_end,htx_date,admission_date,discharge_date,ht_event_date,ht_atb_1_start,ht_atb_1_end,ht_atb_2_start,ht_atb_2_end,ht_atb_3_start,ht_atb_3_end,ht_cmv_date,ht_cmv_therapy_start,ht_cmv_therapy_end,ht_ar_therapy_date,lastfup,death_date), convert_to_date)) %>%
  
#####################################################
#### FILLING UP DATE NAs FOR SUBSEQUENT ANALYSIS #### 
#####################################################

group_by(study_id) %>%
  mutate(
    lvad_date  = first(na.omit(lvad_date)),
    data_nit   = first(na.omit(data_nit)),
    htx_date   = first(na.omit(htx_date)),
    lastfup    = first(na.omit(lastfup)),
    death_date = first(na.omit(death_date)),
    status = first(na.omit(status)),
    ) %>%
ungroup() %>% 
  
################################
##### RELEVANT TIME FRAMES###### 
###############################

  mutate(
    hlosdays = as.numeric (h_discharge - h_admission),
    li.infection.onset =   as.numeric(li_event_date - lvad_date),
    ht.infection.onset =   as.numeric(ht_event_date - lvad_date),
    lvadtohtx = as.numeric(htx_date - lvad_date),
    fup.time = as.numeric(lastfup - lvad_date),
    lvadtohtxmonths = round(as.numeric(htx_date - lvad_date)/30.4375,0),
    lvad.time = case_when(    #months
      is.na(htx_date) ~ round(as.numeric(lastfup - lvad_date)/30.4375,1),
      !is.na(htx_date) ~ round(as.numeric(htx_date - lvad_date)/30.4375,1))
    )

# hlosdays --> hospital Lenght of Stay
# li.infection.onset --> time to infection during LVAD support (from LVAD implantation)
# ht.infection.onset --> time to infection after heart transplant (from LVAD implantation)
# lvadtohtxmonths --> months between LVAD implantation and heart transplant
# lvad.time (months) --> lvad support period (either until htx or last follow up)

##########################
#### LIST OF PATIENTS ####
##########################
ptlist <- data %>% 
  select(study_id) %>% 
  unique()

htxlist <- data %>%
  filter(!is.na(htx_date)) %>% 
  select(study_id) %>%  
  unique()

# ptlist --> list of all patients
# htxlist --> list of transplanted patients


```

```{r Classification_functions}

#################################
#### Gram + , Gram -, Fungus #### 
#################################

micro_groups <- function(micro.group) {
  case_when(
    is.na(micro.group) ~ NA_character_,
    
    micro.group %in% c(
  "Aerococcus spp", "Chlamydia penumoniae",
  "Clostridioides difficile", "Clostridioides spp.",
  "Corynebacterium spp.", "Entertococcus faecalis",
  "Enterococcus faecium", "Enterococcus spp.",
  "Listeria monocytogenes", "Micrococcus spp.",
  "Staphylococcus aureus", "Staphylococcus capitis",
  "Staphylococcus caprae", "Staphylococcus epidermidis",
  "Staphylococcus gallinarum","Staphylococcus haemolyticus",
  "Staphylococcus hominis", "Staphylococcus intermedius",
  "Staphylococcus lugdunensis", "Staphylococcus sapophyticus",
  "Staphylococcus warneri","Streptococcus agalactiae",
  "Streptococcus anginosus", "Streptococcus constellatus",
  "Streptococcus gallolyticus", "Streptococcus dysgalactiae",
  "Streptococcus infantarius","Streptococcus sanguinis",
  "Streptococcus suis", "Streptococcus mitis", 
  "Streptococcus pneumoniae", "Streptococcus mutans"
  ) ~ "GramPositive",
  
micro.group %in% c(
  "Achromobacter xyloxidans", "Acinetobacter baumannii complex",
  "Aeromonas spp.","Bacteroides spp.", "Brucella spp.",
  "Burkholderia cepacia complex", "Citrobacter spp",
  "Enterobacter cloacae", "Enterobacter spp.", "Escherichia coli",
  "Haemophilus influnzae","Klebsiella pneumoniae",
  "Legionalla penumophila", "Morganella spp.", "Mycoplasma pneumoniae",
  "Neisseria gonorrhoeae", "Neisseria meningitidis",
  "Prevotella spp", "Proteus spp.","Providencia spp.",
  "Pseudomonas aeruginosa", "Pseudomonas spp.", "Raoultella spp.",
  "Serratia marcescens", "Stenotrophomonas maltophilia", "Vibrio spp."
) ~ "GramNegative",

micro.group %in% c(
  "Candida albicans", "Candida parapsilosis",
  "Candida tropicalis", "Candida galbrata",
  "Candida krusei", "Candida", "Aspergillus fumigatus",
  "Aspergillus niger"
  ) ~ "Fungus",

  TRUE ~ "Unknown"
)
}

###############################
#### MICRORGANISM FAMILIES #### 
###############################

micro_family <- function(micro) {
  case_when(
    is.na(micro) ~ NA_character_,
    micro == "Acinetobacter baumannii complex" ~ "Acinetobacter",
    micro %in% c("Aspergillus fumigatus", "Aspergillus niger") ~ "Aspergillus",
    micro == "Brucella spp." ~ "Brucella",
    micro %in% c("Candida albicans", "Candida parapsilosis", "Candida tropicalis", 
                 "Candida galbrata", "Candida krusei", "Candida") ~ "Candida",
    micro == "Chlamydia penumoniae" ~ "Chlamydia",
    micro %in% c("Clostridioides difficile",
                 "Clostridioides spp.") ~ "Clostridioides",
    micro == "Corynebacterium spp." ~ "Corynebacterium",
    micro %in% c("Citrobacter spp", "Enterobacter cloacae", "Enterobacter spp.",
                 "Escherichia coli", "Klebsiella pneumoniae", "Morganella spp.",
                 "Proteus spp.", "Providencia spp.","Raoultella spp.",
                 "Serratia marcescens") ~ "Enterobacteriaceae",
    micro %in% c("Entertococcus faecalis", "Enterococcus faecium",
                 "Enterococcus spp.") ~ "Enterococcus",
    micro == "Haemophilus influnzae" ~ "Haemophilus",
    micro == "Legionalla penumophila" ~ "Legionella",
    micro == "Listeria monocytogenes" ~ "Listeria",
    micro == "Mycoplasma pneumoniae" ~ "Mycoplasma",
    micro %in% c("Neisseria gonorrhoeae", "Neisseria meningitidis") ~ "Neisseria",
    micro %in% c("Achromobacter xyloxidans", "Aerococcus spp",
                 "Aeromonas spp.", "Bacteroides spp.",
                 "Burkholderia cepacia complex", "Micrococcus spp.",
                 "Prevotella spp", "Vibrio spp.", "Altro") ~ "Altro",
    micro %in% c("Pseudomonas aeruginosa", "Pseudomonas spp.") ~ "Pseudomonas",
    micro == "Staphylococcus aureus" ~ "St. aureus",
    micro %in% c("Staphylococcus capitis", "Staphylococcus caprae",
                 "Staphylococcus gallinarum","Staphylococcus haemolyticus",
                 "Staphylococcus hominis", "Staphylococcus intermedius",
                 "Staphylococcus lugdunensis", "Staphylococcus sapophyticus",
                 "Staphylococcus warneri") ~ "St. coagulase neg",
    micro == "Staphylococcus epidermidis" ~ "St. epidermidis",
    micro == "Stenotrophomonas maltophilia" ~ "Stenotrophomonas",
    micro %in% c("Streptococcus agalactiae", "Streptococcus anginosus",
                 "Streptococcus constellatus","Streptococcus gallolyticus",
                 "Streptococcus dysgalactiae", "Streptococcus infantarius",
                 "Streptococcus sanguinis", "Streptococcus suis",
                 "Streptococcus mitis","Streptococcus pneumoniae",
                 "Streptococcus mutans") ~ "Streptococcus",
  )
}

#####################
#### Antibiotics #### 
#####################

classify_atb <- function(atb) {
  case_when(
    is.na(atb) ~ NA_character_,
    atb %in% c("Amikacin", "Gentamicin", "Tobramycin") ~ "Aminoglycosides",
    atb %in% c("Amoxicillin-clav", "Ampicillin-sulb",
               "Piperacillin-tazobactam") ~ "Anti-anaerobic betalactam",
    atb %in% c("Amoxicillin", "Ampicillin", "Oxaciliina",
               "Aztreonam") ~ "Non anti-anaerobic betalactam",
    atb %in% c("Meropenem", "Ertapenem", "Imipenem",
               "Meropenem-vaborbactam", "Imipenem-relebactam") ~ "Carbapenems",
    atb %in% c("Cefazolin", "Cefepime", "Ceftriaxone", "Cefiderocol",
               "Cefitaxime", "Ceftazidime", "Ceftazidime-avibactam",
               "Ceftolozane-tazobactam", "Ceftaroline") ~ "Cephalosporin",
    atb == "Ceftobiprole" ~ "Anti-MRSA cephalosporin",
    atb %in% c("Ciprofloxacin", "Levofloxacin") ~ "Quinolones",
    atb %in% c("Azithromycin", "Clarithromycin") ~ "Macrolide",
    atb == "Linezolid" ~ "Linezolid",
    atb == "Doxycycline" ~ "Doxycycline",
    atb == "Vancomycin" ~ "Glycopeptides",
    atb == "Daptomycin" ~ "Daptomycin",
    atb == "Trimethroprim-Sulfamethoxazole" ~ "Trimethoprim-Sulfamethoxazole",
    atb %in% c("Fluconazolo", "Voriconazolo", "Caspofungin",
               "Amfotericin B") ~ "Antifungals",
    atb %in% c("Clindamycin", "Colistin", "Dalbavacin",
               "Fosomycin", "Nitrofurantoin", "Rifampin",
               "Tigecyline", "Altro") ~ "Other"
  )
}

```

```{r lvad.specific.infection.factor}

lvad.specific.infection.free.data <- data %>%
  filter(is.na(li_event_date) | li_event_date > lvad_date) %>%
  mutate(
    
    lvad.specific.infection.free.time = case_when(
      
      li_infection_site.factor == "L-VAD specific infection" |
      li_sbsi.factor == "L-VAD specific infection"
      ~ as.numeric(li_event_date - lvad_date)/30.4375,
      
      is.na(htx_date)
      ~ as.numeric(lastfup - lvad_date)/30.4375,
      
      !is.na(htx_date)
      ~ as.numeric(htx_date - lvad_date)/30.4375),
      
    lvad.specific.infection_event = case_when(
      li_infection_site.factor == "L-VAD specific infection" | 
      li_sbsi.factor == "L-VAD specific infection" ~ 1,
      TRUE ~ 0)
    )%>%
      group_by(study_id) %>%
      slice_max(lvad.specific.infection_event, with_ties = FALSE) 

#################### COVARIATE ####################
###########  LVAD-Specific Infection  #############
###################################################

lvad.specific.infection.cov <- lvad.specific.infection.free.data %>% 
select(study_id,lvad.specific.infection_event) %>% 
  mutate(
  lvad.specific.infection_event.factor = factor(
  ifelse(lvad.specific.infection_event == 1, "Yes", "No"),
  levels = c("No", "Yes")))

############# COVARIATE #############
###########  LVAD Era  ##############
#####################################

lvad.era <- data %>% 
  select(study_id, lvad_date) %>%
  unique() %>% 
  mutate(
    lvad.era = case_when(
      lvad_date >= ymd("2008-01-01") & lvad_date <= ymd("2019-12-31") ~ "2008–2019",
      lvad_date >= ymd("2020-01-01") & lvad_date <= ymd("2024-12-31") ~ "2020–2024"
    ),
    lvad.era = factor(lvad.era, levels = c("2008–2019", "2020–2024"))
  ) %>% 
  select(-lvad_date)

```

## BASELINE VARIABLES

```{r}

# a. Which of the predictors are quantitative, and which are qualitative?
 
# Quantitative: 
vars_quantitative <- c("age") #,"bmi"
 # Qualitative:
vars_qualitative <- c("sex.factor", "intermacs.factor", "lvad_mod.factor", "lvad_ind.factor","cmp_aethiology.factor","hyper.factor","dyslip.factor","diabetes.factor","renal_insuff.factor","smoke.factor","coronary_dis.factor","infarction.factor","arrhyt.factor","valve_rep.factor","pm.factor","surgery.factor")

data_exp <- data %>% 
  filter (is.na(redcap_repeat_instance)) %>% 
  select(study_id,all_of(c(vars_quantitative, vars_qualitative)))


# Loop over all categorical variables
for (var in vars_qualitative) {
  df_filtered <- data_exp %>%
    filter(!is.na(.data[[var]]))   # remove NAs for the current variable
  
  p <- ggplot(df_filtered, aes_string(x = var, y = "age", fill = var)) +
    geom_violin(trim = FALSE, alpha = 0.5) +
    geom_boxplot(width = 0.1, outlier.shape = NA) +
    labs(title = paste("Age distribution by", var)) +
    theme_minimal()
  
  print(p)
  
}

freq_tables <- map(vars_qualitative, function(var) {
  data_exp %>%
    count(!!sym(var)) %>%
    mutate(Proportion = round(n / sum(n),2)) %>%
    rename(Level = !!sym(var)) %>%
    mutate(Variable = var, .before = 1)
})

# Combine all into one big table
freq_summary <- bind_rows(freq_tables)

freq_summary %>% 
  gt()


```

```{r table_one}
#| label: tbl-table_one
#| tbl-cap: "Clinical Features at LVAD implantation"

tab1vars <- data %>% 
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,
         age,sex.factor,bmi,intermacs.factor,lvad_mod.factor,lvad_ind.factor,
         cmp_aethiology.factor,hyper.factor,dyslip.factor,diabetes.factor,
         renal_insuff.factor,smoke.factor,coronary_dis.factor,
         infarction.factor,arrhyt.factor,valve_rep.factor,pm.factor,
         surgery.factor) %>%  #,creatinina,drugs.factor
  mutate(across(where(is.factor), droplevels))
 
tab1vars <- tab1vars %>%
  left_join(select(lvad.specific.infection.cov, #in left join, you can specify the object and the variables taken from the object
                   study_id,                        
                   lvad.specific.infection_event.factor), by = "study_id") %>%
  left_join(select(lvad.era,
                   study_id,
                   lvad.era), by = "study_id") %>%
  select(-study_id)

# Defining continuous and categorical variables
#tab1vars.cat <- tab1vars %>% 
#  select(ends_with(".factor"))
#tab1vars.cont <- tab1vars %>% 
#  select(-ends_with(".factor")) 

tab1vars %>% 
   tbl_summary(
     by= lvad.specific.infection_event.factor, 
     missing = "no",
     sort = list(all_categorical()~ "frequency"),
     statistic = list(
      all_continuous() ~ "{mean} ({sd})",
      all_categorical() ~ "{n} ({p}%)"
      ),
     label = list(
        age  ~ "Age (years)",
        sex.factor  ~ "Sex",
        bmi  ~ "BMI",
        intermacs.factor  ~ "INTERMACS",
        lvad_mod.factor  ~ "LVAD Device",
        lvad_ind.factor  ~ "Indication",
        cmp_aethiology.factor  ~ "Cardiomyopathy aethiology",
        hyper.factor  ~ "Hypertension",
        dyslip.factor  ~ "Dyslipidaemia",
        diabetes.factor ~ "Diabetes (type 1 or type 2)",
        renal_insuff.factor ~ "Renal insufficiency",
        smoke.factor ~ "History of smoking",
        #drugs.factor  ~ "Alcohol or drug abuse",
        coronary_dis.factor  ~ "Coronary artery disease",
        infarction.factor  ~ "Previous infarction",
        arrhyt.factor  ~ "Arrhytmia",
        valve_rep.factor  ~ "Valve repair/replace",
        pm.factor  ~ "Pacemeker",
        surgery.factor ~ "Major previous surgery", 
        lvad.era ~"LVAD implantation period" #creatinina ~ "Creatinine"
        )
)%>%
  add_p(pvalue_fun = label_style_pvalue(digits = 2)) %>%
  add_overall() %>% 
modify_spanning_header(all_stat_cols() ~ "**LVAD Specific Infection**")

   
# type = list(
#           names(tab1vars.cont) ~ "continuous",
#           names(tab1vars.cat) ~ "categorical")


```

Age interquantiles ranges

```{r age_IQR}
IQRage <- summary(data_exp$age) %>% 
  print()
```

BMI interquantiles ranges

```{r bmi_IQR}
IQRbmi <- summary(data$bmi) %>% 
    print()

```

{{< pagebreak >}}

## FOLLOW UP VARIABLES

### Sites of infection

```{r infection_site}
#| label: tbl-infection_site
#| tbl-cap: "Sites of infection in LVAD patients"

infection_site <- data %>%
  filter(li_event_date > lvad_date) %>% 
  select(study_id,li_infection_site.factor) %>% 
  drop_na(li_infection_site.factor) %>%  
  group_by(li_infection_site.factor) %>% 
  summarise(
    Counts=n(),
    Patients = n_distinct(study_id)
  ) %>% 
  mutate(
    pt_prop = round(Patients/nrow(ptlist)*100,1),
    prop = round(Counts/sum(Counts)*100,1),
         ) %>%
  select(li_infection_site.factor,Patients, pt_prop,Counts,prop) %>% 
   mutate(sort_key = if_else(li_infection_site.factor == "Altro", Inf, -Counts)) %>%
  arrange(sort_key) %>%
  select(-sort_key)


infection_site %>% 
  rename('SEDE INFEZIONE' = li_infection_site.factor,
         'n° of patients'= Patients,
         '% of patients'= pt_prop,
         'n° of infections'= Counts,
         '% of total infection'= prop) %>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

 
  

```

### Secondary batteremia

```{r SECONDARY_BACTEREMIA}
#| label: tbl-bacteremia_site
#| tbl-cap: "Secondary bacteraemia in LVAD patients"

infection_site <- data %>%
  filter(li_event_date > lvad_date) %>% 
  select(study_id,li_sbsi.factor) %>% 
  drop_na(li_sbsi.factor) %>%   
  group_by(li_sbsi.factor) %>% 
  summarise(
    Counts=n(),
    Patients = n_distinct(study_id)
  ) %>% 
  mutate(
    pt_prop = round(Patients/nrow(ptlist)*100,1),
    prop = round(Counts/sum(Counts)*100,1),
         ) %>% 
   select(li_sbsi.factor,Patients, pt_prop,Counts,prop) %>% 
  mutate(sort_key = if_else(li_sbsi.factor == "Altro", Inf, -Counts)) %>%
  arrange(sort_key) %>%
  select(-sort_key)

infection_site %>% 
  rename('BATTERIEMIA SECONDARIA' = li_sbsi.factor,
         'n° of patients'= Patients,
         '% of patients'= pt_prop,
         'n° of infection'= Counts,
         '% of total secondary bacteremia'= prop) %>%  
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### LVAD Specific Infections

```{r LVAD_SPECIFIC_INFECTION}
#| label: tbl-vsi
#| tbl-cap: "L-VAD Specific Infections"
  
vsi <- data %>% 
  filter(li_event_date > lvad_date) %>% 
  select(study_id, li_lvad_infection.factor) %>%
  drop_na(li_lvad_infection.factor) %>% 
  group_by(li_lvad_infection.factor) %>%
  summarise(
    Counts=n(),
    Patients = n_distinct(study_id)
  ) %>% 
  mutate(
    pt_prop = round(Patients/nrow(ptlist)*100,1),
    prop = round(Counts/sum(Counts)*100,1),
         ) %>%
  select(li_lvad_infection.factor,Patients, pt_prop,Counts,prop) %>% 
  arrange(desc(Counts))
  

vsi %>% 
  rename('LVAD-specific infection' = li_lvad_infection.factor,
         'n° of patients'= Patients,
         '% of patients'= pt_prop,
         'n° of infection'= Counts,
         '% of total LVAD-specific infection'= prop) %>%
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### Sepsis

```{r SEPSI}
#| label: tbl-sepsi
#| tbl-cap: "Septic episodes"

sepsi <- data %>% 
  filter(li_event_date > lvad_date) %>% 
  select(study_id,li_sepsi.factor) %>% 
  mutate(li_sepsi.factor = replace_na(li_sepsi.factor, "No")) %>%
  group_by(li_sepsi.factor) %>% 
  summarise(Counts=n(),
            Patients = n_distinct(study_id)
  ) %>%  
  mutate(
    pt_prop = round(Patients/nrow(ptlist)*100,1),
    prop = round(Counts/sum(Counts)*100,1))

sepsi %>% 
  filter(li_sepsi.factor != "No") %>%
  select(li_sepsi.factor,Patients, pt_prop,Counts,prop) %>% 
  rename('Sepsi' = li_sepsi.factor,
         'n° of patients with sepsis'= Patients,
         '% of patients with sepsis'= pt_prop,
         'n° of septic episodes'= Counts,
         '% of septic episodes among all infections'= prop, 
         ) %>%
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### Pathogens identified during infection

```{r Identified microorganism}
#| label: tbl-microorganism
#| tbl-cap: "Pathogens identified during infection"

# 1. Extracts the three microorganism columns, reshapes them into a single pathogen column

microorganism <- map_dfr(1:3, ~{  
  col_name <- if (.x == 1) {
    "li_microorganism.factor"
  } else {
    glue("li_microorganism_{.x}.factor")
  }
data %>%
    filter(li_event_date > lvad_date) %>%
    select(
      study_id,
      pathogen = !!sym(col_name) #Take the column whose name is stored in col_name, and use it as the value for the new pathogen column
    )
}) %>% 
   #filters out missing values, and assigns each pathogen to a group using micro_groups()
   drop_na() %>%  
  mutate(
    pathogen_group = micro_groups(pathogen)
  ) 

#map_dfr --> applies a function to each element of a list or vector and combines the results row-wise into a single data frame
#we recommend using map(), map2(), etc with list_rbind() and list_cbind(). These use vctrs::vec_rbind() and vctrs::vec_cbind() under the hood, and have names that more clearly reflect their semantics

 
# 2. Summary table
micro_summary_table <- microorganism %>%
  group_by(pathogen_group, pathogen) %>%
  summarise(
    total_micro = n(), 
    .groups = "drop"
  ) 

# 3. Subtotals per micro groups
micro_subtotals <- micro_summary_table %>%
  group_by(pathogen_group) %>%
  summarise(
    pathogen = "Subtotal",
    total_micro = sum(total_micro),
    .groups = "drop"
  ) 

# 4. Combine and arrange
micro_summary_with_subtotals <- bind_rows(micro_subtotals, micro_summary_table) %>% 
  mutate(
    pathogen_group = factor(
      pathogen_group,
      levels = c("GramPositive", "GramNegative", "Fungus")
    ),
    is_subtotal = (pathogen == "Subtotal")  # <-- this line was outside mutate()
  ) %>%
  arrange(
    pathogen_group,           # groups in your factor order
    desc(is_subtotal),        # subtotals first within group
    desc(total_micro)         # then microorganisms by descending count
  ) %>%
  select(-is_subtotal) %>%
  mutate(
    pathogen_group = if_else(pathogen != "Subtotal", "", pathogen_group)
  )


# 5. Display with flextable
micro_summary_with_subtotals %>%
rename('TYPE OF MICROORGANISM'= pathogen_group,
       'MICROORGANISM'= pathogen,
       'TOTAL COUNTS'= total_micro) %>%
  flextable() %>%
  bold(i = ~ MICROORGANISM == "Subtotal", bold = TRUE) %>%
  bold(part = "header") %>%
  align(align = "center", part = "all") %>% 
  autofit()

```

### Categories of microorganisms

```{r microorganism_class}
#| label: tbl-microorganism_class
#| tbl-cap: "Categories of microorganisms identified in infectious episodes"

data <- data %>% 
    mutate(
    li_microorganism.factor_class   = micro_family(li_microorganism.factor),
    li_microorganism_2.factor_class = micro_family(li_microorganism_2.factor),
    li_microorganism_3.factor_class = micro_family(li_microorganism_3.factor)
    #li_microorganism.factor_class --> class of pathogen as per function "micro_family"
    ) 

li_microorganism_class <- data %>%
  filter(li_event_date > lvad_date) %>%  
  select(study_id,
         li_microorganism.factor_class,
         li_microorganism_2.factor_class,
         li_microorganism_3.factor_class
         ) %>%
  pivot_longer(cols = li_microorganism.factor_class:li_microorganism_3.factor_class, 
               names_to = "Variable", values_to = "Microorganism_Class") %>%
  drop_na(Microorganism_Class)
  
li_microorganism_class.table <- li_microorganism_class %>%
  group_by(Microorganism_Class) %>%
  dplyr::summarize(Counts=n()) %>% 
  mutate(prop = round(Counts/sum(Counts)*100,1)) %>% 
  mutate(sort_key = if_else(Microorganism_Class == "Altro", Inf, -Counts)) %>%
  arrange(sort_key) %>%
  select(-sort_key) %>% 
  rename('Microorganism class'=Microorganism_Class,
         'n'= Counts,
         '%'= prop) %>%
  flextable() %>%
  autofit() %>% 
  bold(part = "header")

li_microorganism_class.table
```

### Multi Drug Resistant Organism

```{r MDRO}
#| label: tbl-mdro
#| tbl-cap: "Multi Drug Resistant Organism"

mdro <- data %>% 
  filter(redcap_repeat_instrument == "infezioni_lvad") %>%
  filter(li_event_date > lvad_date) %>%
  select(study_id,li_mdro.factor) %>%
  drop_na(li_mdro.factor) %>%
  group_by(li_mdro.factor) %>%
  dplyr::summarise(
    Counts=n(),
    Patients = n_distinct(study_id)
  ) %>% 
  mutate(
    pt_prop = round(Patients/nrow(ptlist)*100,1),
    prop = round(Counts/sum(Counts)*100,1),
         ) %>%
  select(li_mdro.factor,Patients, pt_prop,Counts,prop) %>%
  mutate(sort_key = if_else(li_mdro.factor == "Altro", Inf, -Counts)) %>%
  arrange(sort_key) %>%
  select(-sort_key)

  
mdro %>% 
rename('Multidrug Resistant Organism' = li_mdro.factor,
         'n° of patients'= Patients,
         '% of patients'= pt_prop,
         'n° of infections'= Counts,
         '% of total infection'= prop) %>%  
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")




```

```{r MDRO}
#| label: fig-mdro
#| fig-cap: "Multidrug Resistant Organism"

mdro2 <- mdro %>%
  mutate(li_mdro.factor = recode(li_mdro.factor,
    "CARBA-R (non carbapenemasi, Enterobacterales)" = "CARBA-R",
    "DTR (P.aeruginosa e A.baumannii)" = "DTR",
    "Vancomicina R (non S.aureus)" = "Vancomicina R" 
  ))

ggplot(mdro2, aes(x = reorder(li_mdro.factor, -prop), y = prop, fill = li_mdro.factor)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0(prop, "%")), vjust = -0.5, size = 3.5) +
  labs(
    title = "Multidrug Resistant Organism",
    x = "",
    y = "%"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Paired") +  # palette Paired fino a 12 colori
  guides(fill = "none")

```

```{r atb.class}

# I don't know wheter this chunk is redundant...

data <- data %>%
  mutate(
    li_atb_1.factor_class = classify_atb(li_atb_1.factor),
    li_atb_2.factor_class = classify_atb(li_atb_2.factor),
    li_atb_3.factor_class = classify_atb(li_atb_3.factor),
    li_atb_4.factor_class = classify_atb(li_atb_4.factor)
  )

```

### Antibiotic utilization

```{r ATB_CONSUMPTION}
#| label: tbl-atb
#| tbl-cap: "Antibiotic utilization"

# 1. Build `atb` dataset from 4 antibiotic slots
atb <- map_dfr(1:4, ~{
  data %>%
    filter(li_event_date > lvad_date) %>%
    select(
      study_id,
      atb = !!sym(glue("li_atb_{.x}.factor")),
      start = !!sym(glue("li_atb_{.x}_start")),
      end = !!sym(glue("li_atb_{.x}_end"))
    )
}) %>%
  drop_na() %>%
  mutate(
    atbdays = as.numeric(end - start),
    atb_class = classify_atb(atb)
  )

# 2. Summary table: total + mean duration per antibiotic
summary_table <- atb %>%
  group_by(atb_class, atb) %>%
  summarise(
    total_days = sum(atbdays, na.rm = TRUE),
    mean_days = round(mean(atbdays, na.rm = TRUE), 1),
    sd_days = round(sd(atbdays, na.rm = TRUE), 1),
    .groups = "drop"
  ) %>% 
mutate(
  mean_sd = ifelse(
    is.na(sd_days),
    as.character(mean_days),
    paste0(mean_days, " (", sd_days, ")")
  )
)

# 3. Subtotals per antibiotic class
subtotals <- summary_table %>%
  group_by(atb_class) %>%
  summarise(
    atb = "Subtotal",
    total_days = sum(total_days),
    mean_days = NA_real_,
    mean_sd = "",
    .groups = "drop"
  )

# 4. Combine and arrange
summary_with_subtotals <- bind_rows(subtotals, summary_table) %>%
  arrange(atb_class, desc(atb == "Subtotal")) %>%
  mutate(
    atb_class = if_else(atb != "Subtotal", "", atb_class)
  ) %>% 
  select(-mean_days,-sd_days)

# 5. Display with flextable
summary_with_subtotals %>%  
rename('CLASS'= atb_class,
       'ANTIBIOTIC'= atb,
       'TOTAL DAYS'= total_days,
       'MEAN DAYS (SD) ' = mean_sd) %>%
  flextable() %>%
  bold(i = ~ ANTIBIOTIC == "Subtotal", bold = TRUE) %>%
  bold(part = "header") %>%
  align(align = "center", part = "all") %>% 
  autofit()

```

```{r ATB_CONSUMPTION_Graph}
#| label: fig-atb
#| fig-cap: "DOT per Antibiotic Class"

plot_data <- summary_with_subtotals %>%
  filter(atb == "Subtotal")

# Prendiamo 8 colori da Set1 e 8 da Set3
colors <- c(brewer.pal(8, "Set1"), brewer.pal(8, "Set3"))

ggplot(plot_data, aes(x = atb_class, y = total_days, fill = atb_class)) +
  geom_col() +
  labs(title = "DOT per Antibiotic Class",
       x = "",
       y = "Days of therapy (DOT)",
       fill = "Classe") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_manual(values = colors) +
  guides(fill = "none")


```


## STATISTICAL ANALYSIS

Cause-specific cumulative incidence functions for the first infection were estimated over the entire follow-up, with death and transplantation treated as competing events. Analyses were conducted separately for LVAD-specific and non-LVAD-specific infections to assess incidence patterns for each infection type.

#### LVAD-specific infections cumulative incidence adjusted for competing risks

```{r incidenza_cumulativa_infezioni.LVAD.specifiche}
#| label: fig-LVAD-specific_Cumulative_Incidence
#| fig-cap: "LVAD-specific infections cumulative incidence (adjusted for competing risks)"

temp1 <- data %>%
  filter(redcap_repeat_instrument == "infezioni_lvad") %>%
  select(study_id, li_lvad_infection.factor, li.infection.onset) %>% 
  mutate(status=ifelse(li.infection.onset>0 & !is.na(li_lvad_infection.factor),3,NA)) %>% 
  drop_na() %>% 
  rename(etime = li.infection.onset) %>%  
  select (-li_lvad_infection.factor)

temp2 <- data %>%
  filter(redcap_repeat_instrument == "infezioni_lvad") %>%
  select(study_id,lvadtohtx) %>% 
  mutate(status=ifelse(!is.na(lvadtohtx),2,NA)) %>% 
  drop_na() %>% 
  rename(etime = lvadtohtx)

temp3 <- data %>%
  filter(redcap_repeat_instrument == "infezioni_lvad") %>%
  select(study_id, fup.time, status) %>%
  mutate(status = as.numeric(status)) %>% 
  rename(etime = fup.time)

cuminc.data <-  rbind(temp1,temp2,temp3) %>% 
  group_by(study_id) %>% 
  slice_min(etime,with_ties = F) 

cuminc.data$status <- factor(cuminc.data$status,0:3, labels=c("censor", "death", "HTX", "VSI"))

cfit1 <- survfit(Surv(etime, status) ~ 1, cuminc.data)
#Aalen–Johansen estimator
#print(cfit1, scale=12*30.4375)

# plot(cfit1, col=c(1,2,3), lty=c(1,2,3),
#        mark.time=FALSE, lwd=2,  xscale=12*30.4375,
#       xlab="Years post LVAD", ylab="Probability in State",
#       main = "Specific LVAD Infection Cumulative Incidence")
# legend(2000,.5,c("death", "HTX", "VSI"),
#         col=c(1,2,3), lty=c(1,2,3), lwd=2, bty='n')


```

```{r VSI_CIF}
#| label: fig-LVAD-specific_Cumulative_Incidence.2
#| fig-cap: "LVAD-specific infections cumulative incidence (adjusted for competing risks)"

# DATA PREPARATION 
vsi.cmprsk.data <- data %>%
  select(study_id,li_infection_site.factor,li_sbsi.factor,lvad_date,li_event_date,htx_date,death_date,lastfup) %>%
  filter(is.na(li_event_date) | li_event_date > lvad_date) %>%
  mutate(
    
    lvad.specific.infection.cmprsk.time = case_when(
      li_infection_site.factor == "L-VAD specific infection" |
      li_sbsi.factor == "L-VAD specific infection"
      ~ as.numeric(li_event_date - lvad_date)/30.4375,
      !is.na(htx_date)
      ~ as.numeric(htx_date - lvad_date)/30.4375,
      is.na(htx_date)
      ~ as.numeric(lastfup - lvad_date)/30.4375),
      
    lvad.specific.infection.cmprsk_event = case_when(
      li_infection_site.factor == "L-VAD specific infection" | 
      li_sbsi.factor == "L-VAD specific infection" ~ "vsi",  
      !is.na(htx_date) ~ "htx",
      !is.na(death_date) ~ "death",
      TRUE ~ "cens"),
    
    lvad.specific.infection.cmprsk_event = factor(lvad.specific.infection.cmprsk_event,
                                                  levels = c("cens","vsi","htx","death"))
    )%>%
      group_by(study_id) %>%
      slice_min(lvad.specific.infection.cmprsk.time, with_ties = FALSE)  

# CUMULATIVE INCIDENCE

vsicmprsk <- tidycmprsk::cuminc(Surv(lvad.specific.infection.cmprsk.time, lvad.specific.infection.cmprsk_event) ~ 1, data = vsi.cmprsk.data)

options("ggsurvfit.switch-color-linetype" = TRUE)

c <- vsicmprsk %>%
  ggcuminc(outcome = c("vsi","htx","death")) + 
  add_confidence_interval() +
  add_risktable() +
  scale_ggsurvfit(
    x_scales = list(limits = c(0, 42),breaks = seq(0, 42, by = 6),name = "Time (months)"),
    y_scales = list(limits = c(0, 0.7),breaks = seq(0, 1, by = 0.1),name = "Cumulative Incidence")
  ) +
  labs(
    title = ""
  )

c1 <- vsicmprsk %>%
  ggcuminc(outcome = c("vsi")) + 
  add_confidence_interval() +
  add_risktable() +
  scale_ggsurvfit(
    x_scales = list(limits = c(0, 42),breaks = seq(0, 42, by = 6),name = "Time (months)"),
    y_scales = list(limits = c(0, 0.7),breaks = seq(0, 1, by = 0.1),name = "Cumulative Incidence")
  ) +
  labs(
    title = "LVAD Specific Infection"
  )

#c
c1

```

```{r}
#| label: tbl-vsicmprsk
#| tbl-cap: "LVAD-specific infections cumulative incidence (adjusted for competing risks)"

tbl_c <-
  vsicmprsk %>%
  tbl_cuminc(times = seq(6,36, by = 6), 
             outcomes = c("vsi","htx","death"),
             label_header = "**Month {time}**")

tbl_c
```

#### Non-LVAD-specific infections cumulative incidence adjusted for competing risks

```{r incidenza_cumulativa_infezioni.NON.LVAD.specifiche}
#| label: fig-NONLVAD-specific_Cumulative_Incidence
#| fig-cap: "Non-LVAD-Specific cumulative incidence during LVAD support (adjusted for competing risks)"

temp4 <- data %>%
  filter(redcap_repeat_instrument == "infezioni_lvad") %>%
  select(study_id, li_infection_site.factor,li_sbsi.factor,
         li_lvad_infection.factor,li.infection.onset) %>%
  filter(is.na(li_lvad_infection.factor)) %>% 
  filter(li.infection.onset>-1) %>% 
  drop_na(li.infection.onset,li_infection_site.factor) %>% 
  rename(etime = li.infection.onset) %>% 
  mutate(status=3) %>% 
  select(study_id,etime,status)
   
cuminc.data2 <-  rbind(temp4,temp2,temp3) %>% 
  group_by(study_id) %>% 
  slice_min(etime,with_ties = F) 

cuminc.data2$status <- factor(cuminc.data2$status,0:3, labels=c("censor", "death", "HTX", "NVSI"))

cfit2 <- survfit(Surv(etime, status) ~ 1, cuminc.data2)

#print(cfit2, scale=12*30.4375)

# plot(cfit2, col=c(1,2,3), lty=c(1,2,3),
#       mark.time=FALSE, lwd=2,  xscale=12*30.4375,
#       xlab="Years post LVAD", ylab="Probability in State",
#       main = "Non Specific LVAD Infection Cumulative Incidence")
# legend(2000,.5,c("death", "HTX", "NVSI"),
#         col=c(1,2,3), lty=c(1,2,3), lwd=2, bty='n')

# CUMULATIVE INCIDENCE
cuminc.data2.0 <-cuminc.data2 %>% 
  mutate(etime = etime/30.4375)

nsicmprsk <- tidycmprsk::cuminc(Surv(etime, status) ~ 1,, data = cuminc.data2.0)

options("ggsurvfit.switch-color-linetype" = TRUE)

d <- nsicmprsk %>%
  ggcuminc(outcome = c("death", "HTX", "NVSI")) + 
  add_confidence_interval() +
  add_risktable() +
  scale_ggsurvfit(
    x_scales = list(limits = c(0, 42),breaks = seq(0, 42, by = 6),name = "Time (months)"),
    y_scales = list(limits = c(0, 0.7),breaks = seq(0, 1, by = 0.1),name = "Cumulative Incidence")
  ) +
  labs(
    title = ""
  )

d1 <- nsicmprsk %>%
  ggcuminc(outcome = c("NVSI")) + 
  add_confidence_interval() +
  add_risktable() +
  scale_ggsurvfit(
    x_scales = list(limits = c(0, 42),breaks = seq(0, 42, by = 6),name = "Time (months)"),
    y_scales = list(limits = c(0, 0.7),breaks = seq(0, 1, by = 0.1),name = "Cumulative Incidence")
  ) +
  labs(
    title = "Non-LVAD-Specific Infection"
  )

#d
d1

```

```{r}
#| label: tbl-nsicmprsk
#| tbl-cap: "Non-LVAD-specific infections cumulative incidence (adjusted for competing risks)"

tbl_d <-
  nsicmprsk %>%
  tbl_cuminc(times = seq(6,36, by = 6), 
             outcomes = c("death", "HTX", "NVSI"),
             label_header = "**Month {time}**")

tbl_d
```


#### Sepsis cumulative incidence

```{r incidenza_cumulativa_sepsi}
#| label: fig-Sepsis_Cumulative_Incidence
#| fig-cap: "Sepsis Cumulative Incidence"

time.to.sepsis <- data %>%
  filter(li_event_date > lvad_date | is.na(li_event_date)) %>% 
  mutate(
    time.to.sepsis_days = case_when(
      li_sepsi.factor == "Yes" ~ as.numeric(li.infection.onset),
      li_sepsi.factor == "No" | is.na(li_sepsi.factor)   ~ round(lvad.time * 30.4375)
    ),
    status = case_when(
  li_sepsi.factor == "Yes" ~ 1,
  li_sepsi.factor == "No" | is.na(li_sepsi.factor) ~ 0
)
  ) %>%
 arrange(study_id, li.infection.onset) %>%
 group_by(study_id) %>%
  filter(
    (any(status == 1) & status == 1 & time.to.sepsis_days == min(time.to.sepsis_days[status == 1], na.rm = TRUE)) |
    (!any(status == 1) & status == 0 & time.to.sepsis_days == max(time.to.sepsis_days[status == 0], na.rm = TRUE))
  ) %>%
  slice(1) %>%  #n case multiple rows satisfy the condition, keep just the first row.
  ungroup() %>% 
  select(
    study_id,
    #li_sepsi.factor,
    #lvad.time,
    #lvad_date,
    time.to.sepsis_days,
    status
  )%>% 
filter(status==1) %>% 
  mutate(status = 3) %>% 
  rename(etime=time.to.sepsis_days)

cuminc.data3 <-  rbind(time.to.sepsis,temp2,temp3) %>% 
  group_by(study_id) %>% 
  slice_min(etime,with_ties = F) 

cuminc.data3$status <- factor(cuminc.data3$status,0:3, labels=c("censor", "death", "HTX", "Sepsis"))

cfit3 <- survfit(Surv(etime, status) ~ 1, cuminc.data3)

#print(cfit3, scale=12*30.4375)

# plot(cfit3, col=c(1,2,3), lty=c(1,2,3),
#       mark.time=FALSE, lwd=2,  xscale=12*30.4375,
#       xlab="Years post LVAD", ylab="Probability in State",
#       main = "Sepsis Cumulative Incidence")
# legend(2000,.2,c("death", "HTX", "Sepsis"),
#         col=c(1,2,3), lty=c(1,2,3), lwd=2, bty='n')

# CUMULATIVE INCIDENCE
cuminc.data3.0 <-cuminc.data3 %>% 
  mutate(etime = etime/30.4375)

sepsis.cmprsk <- tidycmprsk::cuminc(Surv(etime, status) ~ 1,, data = cuminc.data3.0)

options("ggsurvfit.switch-color-linetype" = TRUE)

e <- sepsis.cmprsk %>%
  ggcuminc(outcome = c("death", "HTX", "Sepsis")) + 
  add_confidence_interval() +
  add_risktable() +
  scale_ggsurvfit(
    x_scales = list(limits = c(0, 42),breaks = seq(0, 42, by = 6),name = "Time (months)"),
    y_scales = list(limits = c(0, 0.7),breaks = seq(0, 1, by = 0.1),name = "Cumulative Incidence")
  ) +
  labs(
    title = ""
  )

e1 <- sepsis.cmprsk %>%
  ggcuminc(outcome = c("Sepsis")) + 
  add_confidence_interval() +
  add_risktable() +
  scale_ggsurvfit(
    x_scales = list(limits = c(0, 42),breaks = seq(0, 42, by = 6),name = "Time (months)"),
    y_scales = list(limits = c(0, 0.7),breaks = seq(0, 1, by = 0.1),name = "Cumulative Incidence")
  ) +
  labs(
    title = "Sepsis"
  )

e
e1


```

```{r incidenza_cumulativa_sepsi2}
#| label: tbl-Sepsis_Cumulative_Incidence
#| tbl-cap: "Sepsis Cumulative Incidence"

# times of interest (every 6 months up to 36)
times_of_interest <- seq(6, 36, by = 6)

# summary at those times
summary_fit <- summary(cfit3, times = times_of_interest*30.4375)

# Build table for Sepsis cumulative incidence
# (adjust the column index of pstate/lower/upper depending on order of states)
incidence_table <- data.frame(
  Months    = summary_fit$time/30.4375,
  Incidence = round(summary_fit$pstate[, "Sepsis"], 2),
  "Lower CI" = round(summary_fit$lower[, "Sepsis"], 2),
  "Upper CI" = round(summary_fit$upper[, "Sepsis"], 2)
)

# Pretty table

incidence_table %>%
  flextable() %>%
  align(align = "center", part = "all") %>%
  autofit() %>%
  bold(part = "header")

```

### Transplantation and mortality stratified cumulative incidence


```{r incidenza cumulativa di morte e trapianto - stratificata}
#| label: fig-cuminc2
#| fig-cap: "Cumulative Incidence of Death and Heart Transplant after LVAD (stratified by LVAD indication)"

# data preparation
survdata <- data %>% 
  select(study_id, lvad_date, htx_date, death_date, lastfup, lvad_ind.factor) %>% 
  unique() %>%
  mutate(
    lvad_ind.factor = factor(
      ifelse(
        lvad_ind.factor == "DT - Destination Therapy",
        "DT",
        "BTT/BTC"
      ),
      levels = c("DT", "BTT/BTC")
    ),
    time.to.event = case_when(
      !is.na(htx_date) ~ as.numeric(htx_date - lvad_date) / 30.4375,
      is.na(htx_date) & !is.na(death_date) ~ as.numeric(death_date - lvad_date) / 30.4375,
      is.na(htx_date) & is.na(death_date) ~ as.numeric(lastfup - lvad_date) / 30.4375
    ),
    event = case_when(
      !is.na(htx_date) ~ "htx",
      is.na(htx_date) & !is.na(death_date) ~ "death",
      is.na(htx_date) & is.na(death_date) ~ "lastfup"
    ),
    event = factor(event, levels = c("lastfup", "death", "htx"))
  )

# ---- Filter and plot for BTT/BTC
surv_btt <- survdata %>% filter(lvad_ind.factor == "BTT/BTC")
ci_btt <- cuminc(Surv(time.to.event, event) ~ 1, data = surv_btt)

plot_btt <- ci_btt %>%
  ggcuminc(outcome = c("death", "htx")) +
  add_confidence_interval() +
  add_risktable() +
  scale_ggsurvfit(
    x_scales = list(limits = c(0, 36),breaks = seq(0, 36, by = 6),name = "Time (months)"),
    y_scales = list(limits = c(0, 0.8),breaks = seq(0, 1, by = 0.1),name = "Cumulative Incidence")
  ) +
  labs(
    title = "Cumulative Incidence (BTT/BTC)"
    
  )

# ---- Filter and plot for DT
surv_dt <- survdata %>% filter(lvad_ind.factor == "DT")
ci_dt <- survfit(Surv(time.to.event, event) ~ 1, data = surv_dt)

plot_dt <- ggcuminc(ci_dt, outcome = "death") +
  add_confidence_interval() +
  add_risktable() +
  scale_ggsurvfit(
    x_scales = list(limits = c(0, 36), breaks = seq(0, 36, 6), name = "Time (months)"),
    y_scales = list(limits = c(0, 0.8),breaks = seq(0, 1, by = 0.1))
  ) +
  labs(title = "Mortality (DT)")

# ---- Combine plots side-by-side
#plot_btt 
#plot_dt

plot_btt + plot_dt


```

```{r}
#| label: tbl-btt
#| tbl-cap: "Cumulative Incidence of Death and Heart Transplant after LVAD (bridge to transplant/candidacy)"

tbl_btt <-
  ci_btt %>%
  tbl_cuminc(times = seq(6,36, by = 6), 
             outcomes = c("death", "htx"),
             label_header = "**Month {time}**")

tbl_btt

```

```{r}
#| label: tbl-dt
#| tbl-cap: "Cumulative Incidence of Deathafter LVAD (destination therapy)"


tbl_dt <- tbl_survfit(ci_dt,  times = seq(6, 36, by = 6))

tbl_dt

```


```{r}
# “We applied a multi-state survival model, using the Aalen–Johansen estimator (an extension of the Kaplan–Meier method for non-homogeneous Markov processes with a finite number of states), to account for competing outcomes: survival with heart transplantation and survival without transplantation after the initial LVAD implantation.” --> can't do that! Not possible to stratify for a time dependent covariate as LVAD specific infection...

# “For each permissible transition, entry and exit times were defined (e.g., transplantation was only possible for patients alive on MCS support). The model considered four potential outcome states: survival on durable MCS support, survival following transplantation, death without transplantation, and death after transplantation.”
```

*We will use Cox models to study the effect of the first infection (compared to the absence of infection) on mortality, depending on the time and type of infection.The Cox models will be adjusted for the patient's baseline risk factors. The likelihood ratio test will be used to verify whether the effect of the first infection on mortality differs depending on the time and type of infection.*

```{r covariates_cox.ph_model}
################ COVARIATE ################
######## Baseline Characteristics #########
##########################################
baseline.cov <- c("sex.factor","hyper.factor", "dyslip.factor", "diabetes.factor", "renal_insuff.factor", "smoke.factor", "coronary_dis.factor", "valve_rep.factor", "pm.factor") 

############# COVARIATE #############
#############  Sepsi   ##############
#####################################

sepsi.cov <- data %>% 
  select(study_id,li_sepsi) 
sepsi.cov$li_sepsi[is.na(sepsi.cov$li_sepsi)] <- 0

sepsi.cov <- sepsi.cov %>%
  group_by(study_id) %>% 
  slice_max(li_sepsi, with_ties = F) %>% 
  mutate(sepsi.cov = ifelse(li_sepsi=="0","No","Yes") %>% 
           factor()) %>%
  mutate(sepsi.cov = fct_relevel(sepsi.cov, "No","Yes"))
          
############# COVARIATE #############
############  Intermacs #############
#####################################

intermacs.cov <- data %>%
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,intermacs.factor) %>%
  mutate(
    intermacs.cov = case_when(
      intermacs.factor %in% c("1. Critical cardiogenic shock", "2. Progressive decline on inotropic support") ~ "INTERMACS 1-2",
      intermacs.factor %in% c("3. Stable but inotrope dependent", "4. Resting symptoms home on oral therapy") ~ "INTERMACS 3-4",
      intermacs.factor %in% c("5. Exertion intolerant", "6. Exertion limited", "7. Advanced NYHA Class III symptoms") ~ "INTERMACS 5-7"
    ) %>% factor())


############# COVARIATE #############
###########  Infarction #############
#####################################

infarction.cov <- data %>%
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,infarction.factor) %>%
  mutate(
  infarction.cov = case_when(
      infarction.factor %in% c("< 90 gg", ">90 gg") ~ "Yes",
      infarction.factor == "no" ~ "No"
    ) %>% factor(),
    infarction.cov = fct_relevel(infarction.cov, "No", "Yes")
)

############# COVARIATE #############
###########  LVAD Era  ##############
#####################################

lvad.era <- data %>% 
  select(study_id, lvad_date) %>%
  unique() %>% 
  mutate(
    lvad.era = case_when(
      lvad_date >= ymd("2008-01-01") & lvad_date <= ymd("2019-12-31") ~ "2008–2019",
      lvad_date >= ymd("2020-01-01") & lvad_date <= ymd("2024-12-31") ~ "2020–2024"
    ),
    lvad.era = factor(lvad.era, levels = c("2008–2019", "2020–2024"))
  ) %>% 
  select(-lvad_date)

############# COVARIATE #############
###########  LVAD model #############
#####################################

lvad_mod.cov <- data %>%
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,lvad_mod.factor) %>%
 mutate(
   lvad_mod.cov = case_when(
      lvad_mod.factor == "HeartMate 3" ~ "HeartMate 3",
      lvad_mod.factor %in% c("HeartMate 2", "HeartWare HVAD", "Reliant AVAD", "Incor Berlin Heart") ~ "Other LVAD"
    ) %>% factor()
 )

############# COVARIATE #############
######## Severe infection ###########
#####################################

severe.infection <- data %>% 
  mutate(
    severe.infection.cov = case_when(
      li_infection_site.factor %in% c("Batteriemia primaria (pBSI)","Batteriemia secondaria (sBSI)","Polmonite") ~ 1,
      li_infection_site.factor %in% c("Cute e tessuti molli (non L-VAD relata)","Tratto gastro enterico","Intra-addominale","Sito chirurgico (non L-VAD relata)", "SNC","Genitali","Osteomielite, infezione di protesi articolare","Altro") ~ 0,
      li_infection_site.factor == "L-VAD specific infection" & li_lvad_infection.factor %in% c("Mediastinite / Osteomielite","Endocardite" ) ~ 1,
      li_infection_site.factor == "L-VAD specific infection" & li_lvad_infection.factor %in% c("Pompa, tasca, cannula","Driveline","Altro") ~ 0
    )
) %>% 
  select(study_id,severe.infection.cov) %>% 
  group_by(study_id) %>% 
  slice_max(severe.infection.cov,with_ties = FALSE) %>% 
  ungroup() %>% 
  replace_na(list(severe.infection.cov = 0)) %>% 
  mutate(
    severe.infection.cov = fct_relevel(
    as.factor(ifelse(severe.infection.cov == "0", "No", "Yes")), "No", "Yes")
  )



```

```{r Infection_covariates}

#################### COVARIATE ####################
###########  LVAD-Specific Infection  #############
###################################################

lvad.specific.infection.cov <- lvad.specific.infection.free.data %>% 
select(study_id,lvad.specific.infection_event) %>% 
  mutate(
  lvad.specific.infection_event.factor = factor(
  ifelse(lvad.specific.infection_event == 1, "Yes", "No"),
  levels = c("No", "Yes")))

#################### COVARIATE ####################
###########  Streptococcus Infection  #############
###################################################

streptococcus.infection.cov <- li_microorganism_class %>% 
  mutate(streptoinfection.cov = ifelse(Microorganism_Class == "Streptococcus", 1, 0))%>%
  group_by(study_id) %>% 
  slice_max(streptoinfection.cov, with_ties = F) %>%
  ungroup %>%
  full_join(ptlist,by="study_id") %>% 
  select(-Variable,) %>% 
  replace_na(list(streptoinfection.cov = 0)) %>% 
  mutate(
    streptoinfection.cov = ifelse(streptoinfection.cov == "1","Yes","No") %>% factor(),
    streptoinfection.cov = fct_relevel(streptoinfection.cov, "No", "Yes")
    ) 

#################### COVARIATE ####################
###########  Gram + , Gram -, Fungus  #############
###################################################

micro.group.cov <- microorganism[microorganism$pathogen_group != "Unknown", ] %>% 
  mutate(exposed = 1) %>%
  pivot_wider(
    id_cols = c(study_id),
    names_from = 'pathogen_group',
    values_from = exposed,
    values_fill = 0,
    values_fn = max) %>%
  full_join(ptlist,join_by(study_id))

micro.group.cov$'GramPositive' [is.na(micro.group.cov$'GramPositive')] <- 0
micro.group.cov$'GramNegative' [is.na(micro.group.cov$'GramNegative')] <- 0
micro.group.cov$Fungus [is.na(micro.group.cov$Fungus)] <- 0

micro.group.cov <- micro.group.cov %>% 
  mutate(
  GramPositive.factor = fct_relevel(
    as.factor(ifelse(GramPositive == "0", "No", "Yes")), "No", "Yes"),
  GramNegative.factor = fct_relevel(
    as.factor(ifelse(GramNegative == "0", "No", "Yes")), "No", "Yes"),
  Fungus.factor = fct_relevel(
    as.factor(ifelse(Fungus == "0", "No", "Yes")), "No", "Yes")
) 

#################### COVARIATE ##################
########  MDRO inf. during LVAD support  ########
#################################################

limdro <- data %>% 
  select(study_id,li_mdro.factor) %>% 
  mutate(limdro = 
    if_else(!is.na(li_mdro.factor),1,0)
    ) %>% 
  group_by(study_id) %>% 
  slice_max(limdro,with_ties = FALSE) %>% 
  select(-li_mdro.factor) %>% 
  mutate(
   limdro = if_else(limdro == 0, "No", "Yes"),
   limdro = as.factor(limdro),
   limdro = fct_relevel(limdro, "No", "Yes")
  ) 

limdro.cov <- limdro

############### COVARIATE ##############
########  Tazobactam-Meropenem  ########
########################################

tazobactam.meropenem <- atb %>% 
  mutate(
    taz.mer = if_else(atb == "Piperacillin-tazobactam" |atb =="Meropenem",1,0)) %>%
  group_by(study_id) %>% 
  slice_max(taz.mer,with_ties = F) %>% 
  right_join(ptlist,by = "study_id") %>%
  replace_na(list(taz.mer = 0)) %>% 
  mutate(
    taz.mer = if_else(taz.mer == 0, "No", "Yes"),
    taz.mer = as.factor(taz.mer),
    taz.mer = fct_relevel(taz.mer, "No", "Yes")
    ) %>%
  select(study_id,taz.mer)
  
```

```{r covariate table}

#####################################
######## COVARIATE TABLE ###########
#####################################

# helper function for joining by study_id
left_join_study_id <- function(x, y) {
  left_join(x, y, by = "study_id")
}

# Join all covariates to ptlist
covariate.table <- ptlist %>%
  left_join_study_id(sepsi.cov) %>%
  left_join_study_id(intermacs.cov) %>%
  left_join_study_id(infarction.cov) %>%
  left_join_study_id(lvad.era) %>%
  left_join_study_id(lvad_mod.cov) %>%
  left_join_study_id(severe.infection) %>%
  left_join_study_id(streptococcus.infection.cov) %>%
  left_join_study_id(micro.group.cov) %>%
  left_join_study_id(limdro.cov) %>% 
  left_join_study_id(lvad.specific.infection.cov)

```

### COX PH univariata: rischio infettivo generale durante supporto LVAD

```{r uni.cox.lvadsupport.infectionrisk}

lvad.infection.free.data <- data %>%
  filter(is.na(li_event_date) | li_event_date > lvad_date) %>%
  mutate(
    lvad.infection.free.time = case_when(
      !is.na(li_event_date) ~ as.numeric(li_event_date - lvad_date)/30.4375,
      is.na(li_event_date) & is.na(htx_date) ~ as.numeric(lastfup - lvad_date)/30.4375,
      is.na(li_event_date) & !is.na(htx_date) ~ as.numeric(htx_date - lvad_date)/30.4375
      ),
    lvad.infection_event = case_when(
      !is.na(li_event_date) ~ 1,
       is.na(li_event_date) ~ 0
      )
    ) %>% 
  group_by(study_id) %>%
  slice_min(lvad.infection.free.time, with_ties = FALSE) 

#Prepare dataset for analysis
uni.cox.lvadsupport.infectionrisk.data <- data %>%
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,age,bmi,all_of(baseline.cov)) %>%
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>% 
  left_join(
    select(lvad.infection.free.data, #object (survival data)
      study_id,                      #var1
      lvad.infection.free.time,      #var2
      lvad.infection_event),         #var3
      by = "study_id") %>%    
  left_join(covariate.table, by = "study_id")   #covariates

# Variables
uni.cox.lvadsupport.infectionrisk.covariates <- c(
  "age","bmi", "sex.factor", "intermacs.cov", "lvad_mod.cov",
  "hyper.factor", "dyslip.factor", "diabetes.factor",
  "renal_insuff.factor", "smoke.factor", "coronary_dis.factor",
  "infarction.cov", "valve_rep.factor", "pm.factor")

# Assessing Univariable Cox Models for all Covariates...
uni.cox.lvadsupport.infectionrisk <-
	coxphuni(uni.cox.lvadsupport.infectionrisk.data,                              #data
	         dependent = "Surv(lvad.infection.free.time,lvad.infection_event)",   #dependent
	         uni.cox.lvadsupport.infectionrisk.covariates)                        #explanatory

# ... and summarise them in a nice table!
uni.cox.lvadsupport.infectionrisk %>%
  fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### COX PH multivariata: rischio infettivo generale durante supporto LVAD

```{r multi.cox.lvadsupport.infectionrisk}

#Prepare dataset for analysis
multi.cox.lvadsupport.infectionrisk.data <- data %>%
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,age,bmi, all_of(baseline.cov)) %>%
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>% 
  left_join(
    select(lvad.infection.free.data, #object
      study_id,                      #var1
      lvad.infection.free.time,      #var2
      lvad.infection_event),         #var3
      by = "study_id") %>%     #survival data
  left_join(covariate.table, by = "study_id")   #covariates

# Assessing Multivariable Cox Models for selected Covariates...
multi.cox.lvadsupport.infectionrisk <- multi.cox.lvadsupport.infectionrisk.data %>% 
	coxph(Surv(lvad.infection.free.time,lvad.infection_event) ~
	        age +
	        diabetes.factor + 
	        renal_insuff.factor+
	        infarction.cov,
	        data=.)
	#summary(multi.cox.lvadsupport.infectionrisk)

multi.cox.lvadsupport.infectionrisk %>%
  tbl_regression(exp=T,show_single_row = c("diabetes.factor","renal_insuff.factor","infarction.cov"),
                 label =list (
                  diabetes.factor = "Diabetes",
                  renal_insuff.factor = "Chronic Kidney Disease",
                  infarction.cov = "History of MI"
                 ))

```

### COX PH univariata: rischio infezione LVAD-specifica

```{r uni.cox.lvadspecific.infectionrisk}

#Prepare dataset for analysis
uni.cox.lvadspecific.infectionrisk.data <- data %>%
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,age,bmi, all_of(baseline.cov)) %>%
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>% 
  left_join(
    select(lvad.specific.infection.free.data, #object
      study_id,                               #var1
      lvad.specific.infection.free.time),     #var2
      by = "study_id") %>%           #survival data
  left_join(covariate.table, by = "study_id")   #covariates

# Variables
uni.cox.lvadspecific.infectionrisk.covariates <- c(
  "age","bmi", "sex.factor", "intermacs.cov", "lvad_mod.cov",
  "hyper.factor", "dyslip.factor", "diabetes.factor",
  "renal_insuff.factor", "smoke.factor", "coronary_dis.factor",
  "infarction.cov", "valve_rep.factor", "pm.factor")

# Assessing Univariable Cox Models for all Covariates...
uni.cox.lvadspecific.infectionrisk <-
	coxphuni(uni.cox.lvadspecific.infectionrisk.data,
	         dependent ="Surv(lvad.specific.infection.free.time, lvad.specific.infection_event)",
	         uni.cox.lvadsupport.infectionrisk.covariates)


# ... and summarise them in a nice table!
uni.cox.lvadspecific.infectionrisk %>%
  fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### COX PH multivariata: rischio infezione LVAD-specifica

```{r multi.cox.lvadspecific.infectionrisk}

#Prepare dataset for analysis
multi.cox.lvadspecific.infectionrisk.data <- data %>%
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,age,bmi, all_of(baseline.cov)) %>%
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>% 
  left_join(
    select(lvad.specific.infection.free.data,      #object
           study_id,                               #var1
           lvad.specific.infection.free.time),     #var2
    by = "study_id") %>%                        #survival data
  left_join(covariate.table, by = "study_id")   #covariates

# Assessing Multivariable Cox Models for selected Covariates...
multi.cox.lvadspecific.infectionrisk <- multi.cox.lvadspecific.infectionrisk.data %>% 
  coxph(Surv(lvad.specific.infection.free.time, lvad.specific.infection_event) ~
          age +
          sex.factor + 
          bmi+
          infarction.cov,
        data=.)
#summary(multi.cox.lvadspecific.infectionrisk)

multi.cox.lvadspecific.infectionrisk %>%  
  tbl_regression(exp=T,show_single_row = c("sex.factor","infarction.cov"),
                 label =list (
                  age = "Age",
                  bmi = "BMI",
                  sex.factor = "Female",
                  infarction.cov = "History of MI"
                 ))

```

### Univariate Cox PH: LVAD-specific infections hazard ratios (adjusted for competing risk)

```{r uni.cox.lvadspecific.infectionrisk.cmprsk}

cuminc.data4 <- uni.cox.lvadsupport.infectionrisk.data %>% 
  left_join(cuminc.data, by= "study_id")

# levels: "censor", "death", "HTX", "VSI"


# Create an empty list to store results
cox_results <- list()

# Loop over each variable
for (var in uni.cox.lvadsupport.infectionrisk.covariates) {
  formula <- as.formula(paste("Surv(etime, status) ~", var))
  fit <- coxph(formula, id=study_id,data = cuminc.data4 )
  s <- summary(fit)
  
  coef_names <- rownames(s$coefficients)
  
  # Store HR, 95% CI, and p-value
  res <- data.frame(
    Level = coef_names,
    HR = round(s$coefficients[, "exp(coef)"], 2),
    CI_lower = round(s$conf.int[, "lower .95"], 2),
    CI_upper = round(s$conf.int[, "upper .95"], 2),
    p_value = round(s$coefficients[, "Pr(>|z|)"], 4)
  )
  
  cox_results[[var]] <- res
}

# Combine all results into a single data frame
cox_df <- bind_rows(cox_results) %>% 
  filter(grepl("_1:4$", Level))

# Create a nicely formatted flextable
cox_table <- cox_df %>%
  flextable() %>%
  align(align = "center", part = "all") %>%
  autofit() %>%
  bold(part = "header")

# Display table
cox_table


```

### Multivariate Cox PH: LVAD-specific infections hazard ratios (adjusted for competing risk)

```{r multi.cox.lvadspecific.infectionrisk.cmprsk}

# levels: "censor", "death", "HTX", "VSI"

multi.cox.vsi.cmprsk <-coxph(Surv(etime, status) ~ age + sex.factor  + lvad_mod.cov + diabetes.factor + renal_insuff.factor + smoke.factor + pm.factor
, id= study_id, data= cuminc.data4)

#summary(multi.cox.vsi.cmprsk)
  
#multi.cox.vsi.cmprsk


```
{{< pagebreak >}}

## CARATTERISTICHE DI BASE DEI SOGGETTI TRAPIANTATI

```{r TABLEONE}

t1vars <- data %>% 
  filter(is.na(redcap_repeat_instance)) %>%
  filter(!is.na(htx_date)) %>%
  select(study_id, age,sex.factor,bmi,intermacs.factor,lvad_mod.factor,lvad_ind.factor,cmp_aethiology.factor,hyper.factor,dyslip.factor,diabetes.factor,renal_insuff.factor,smoke.factor,drugs.factor,coronary_dis.factor,infarction.factor,arrhyt.factor,valve_rep.factor,pm.factor,surgery.factor,creatinina,hlosdays,lvadtohtxmonths) %>% 
   mutate(across(where(is.factor), droplevels))

#,valve_dis.factor

#t1vars.cat <- t1vars %>% 
#  select(ends_with(".factor"))
#t1vars.cont <- t1vars %>% 
#  select(!ends_with(".factor")) %>% 
#  select(-study_id)

 # MDRO infection during LVAD-support
mdro.var <- data %>% 
  filter(!is.na(htx_date)) %>%
  select(study_id, starts_with("li_mdro.factor")) %>%
  pivot_longer(-study_id, values_to = "mdro") %>%
  group_by(study_id) %>%
  summarise(mdro_values = paste(unique(na.omit(mdro)), collapse = "; "), .groups = "drop") %>% 
  mutate(mdro_infection = if_else(mdro_values == "", "non MDRO infection", "MDRO infection")) %>% 
  select(study_id,mdro_infection)

# Joining t1vars and MDRO
  t1vars <- full_join(t1vars, mdro.var, by = "study_id") %>% 
    select(-study_id)

t1vars %>% 
   tbl_summary(
     by= mdro_infection,
     missing = "no",
     sort = list(all_categorical()~ "frequency"),
     statistic = list(
      all_continuous() ~ "{mean} ({sd})",
      all_categorical() ~ "{n} ({p}%)"
      ),
     label = list(
        age  ~ "Age at LVAD implantation (years)",
        sex.factor  ~ "Sex",
        bmi  ~ "BMI",
        intermacs.factor  ~ "INTERMACS",
        lvad_mod.factor  ~ "LVAD Device",
        lvad_ind.factor  ~ "LVAD indication",
        cmp_aethiology.factor  ~ "Cardiomyopathy aethiology",
        hyper.factor  ~ "Hypertension",
        dyslip.factor  ~ "Dyslipidaemia",
        diabetes.factor ~ "Diabetes (type 1 or type 2)",
        renal_insuff.factor ~ "Renal insufficiency",
        smoke.factor ~ "History of smoking",
        drugs.factor  ~ "Alcohol or drug abuse",
        coronary_dis.factor  ~ "Coronary artery disease",
        infarction.factor  ~ "Previous infarction",
        arrhyt.factor  ~ "Arrhytmia",
        valve_rep.factor  ~ "Valce repair/replace",
        pm.factor  ~ "Pacemeker",
        surgery.factor ~ "Major previous surgery",
        #creatinina ~ "Creatinine",
        hlosdays ~ "LVAD implantation Hospital LoS(days)",
        lvadtohtxmonths ~ "LVAD support (months)"
     )#,
     #type = list(
      #      names(t1vars.cont) ~ "continuous",
      #      names(t1vars.cat) ~ "categorical")
   ) %>%
  add_p(pvalue_fun = label_style_pvalue(digits = 2)) %>%
  add_overall() 

```

## RISCHIO INFETTIVO E MORTALITA'

### Post-HTX Infection-free survival

```{r POSTHTX_INFECTION_FREE_SURVIVAL}
#| label: fig-posthtx-infkm
#| fig-cap: "Infection free probability after HTx"

############################
# LINGUAGGIO DA UNIFORMARE#
###########################

ptlist3 <- data %>% 
  select(study_id,htx_date,lastfup) %>%
  filter(!is.na(htx_date)) %>% 
  unique

htx.time.to.infection <- data %>%
  filter(redcap_repeat_instrument == "infezioni_htx") %>%
  filter(ht_event_date > htx_date) %>% 
  select(study_id,redcap_repeat_instance,htx_date,ht_event_date,lastfup) %>%
  group_by(study_id) %>%
  slice_min(ht_event_date, with_ties = FALSE) %>%
  ungroup() %>% 
  full_join(ptlist3, by = c("study_id","htx_date","lastfup")) %>%
  mutate(
    survtime = case_when(
      !is.na(ht_event_date) ~ as.numeric(ht_event_date - htx_date)/30.4375,
      is.na(ht_event_date)  ~ as.numeric(lastfup - htx_date)/30.4375
      ),
     infection_event = case_when(
      !is.na(ht_event_date) ~ 1,
      is.na(ht_event_date) ~ 0
      )
  )

km_fit2 <- survfit(Surv(survtime,infection_event) ~ 1, data = htx.time.to.infection) 

j2 <- ggsurvplot(km_fit2, 
               data = htx.time.to.infection, 
               fun="pct", 
               risk.table = T,
               xlim=c(0,12),
               break.x.by = 1,
               legend = "none",
               xlab   = "Months after Heart Transplant",
               ylab   = "", 
               title  = "Post HTx Infection-Free Probability",
               tables.theme = theme_cleantable())

j2

j3<- ggsurvplot(km_fit2, 
               data = htx.time.to.infection, 
               fun="pct", 
               risk.table = T,
               xlim=c(0,36),
               break.x.by = 6,
               legend = "none",
               xlab   = "Months after Heart Transplant",
               ylab   = "", 
               title  = "Post HTx Infection-Free Probability",
               tables.theme = theme_cleantable())

j3

```

```{r}
# Survival probability summary # 

#every 6 months..
summary_km_fit2 <- summary(km_fit2, times = c(1, 2, 3, 4, 5, 6, 12, 18, 24,30,36))

km_fit2_table <- data.frame(
  Time_months = summary_km_fit2$time,
  Survival_percent = round(summary_km_fit2$surv * 100, 1),
  Lower_CI = round(summary_km_fit2$lower * 100, 1),
  Upper_CI = round(summary_km_fit2$upper * 100, 1),
  N_risk = summary_km_fit2$n.risk
)

print(km_fit2_table)

# Time for probability = 75% - 50% - 25%
km_fit2_quantiles <- quantile(km_fit2, probs = c(0.25, 0.5, 0.75))

km_fit2_quantile_table <- data.frame(
  Survival_percent = c(75, 50, 25),  
  Time_months = round(as.numeric(km_fit2_quantiles$quantile), 1)
)

print(km_fit2_quantile_table)


```

### Sopravvivenza post trapianto di cuore nei portatori di LVAD

```{r PostHTX Survival in LVAD recipients}
#| label: fig-kmposthtx
#| fig-cap: "Post HTx survival in LVAD recipients"

kmposthtx <- data %>% 
  filter(is.na(redcap_repeat_instance)) %>%
  filter(!is.na(htx_date)) %>% 
  select(study_id,htx_date,death_date,lastfup) %>% 
  mutate(
    posthtxsurvtime = as.numeric(lastfup - htx_date)/30.4375,
    status = if_else(is.na(death_date) , 0, 1)
    ) 
 
kmposthtx_fit <- survfit(Surv(posthtxsurvtime, status) ~ 1, data = kmposthtx)

w<- ggsurvplot(kmposthtx_fit, 
               data = kmposthtx, 
               fun="pct", 
               risk.table = T,
               xlim=c(0,60),
               break.x.by = 12,
               legend = "none",
               xlab   = "Months after device implantation", 
               ylab   = "Survival Probability", 
               title  = "PostHTX Survival Curve in LVAD recipients",
               tables.theme = theme_cleantable())

w



```

```{r}
# Survival probability summary # 

#every 6 months..
summary_kmposthtx_fit <- summary(kmposthtx_fit, times = c(1, 2, 3, 4, 5, 6, 12,24,36,48))

kmposthtx_fit_table <- data.frame(
  Time_months = summary_kmposthtx_fit$time,
  Survival_percent = round(summary_kmposthtx_fit$surv * 100, 1),
  Lower_CI = round(summary_kmposthtx_fit$lower * 100, 1),
  Upper_CI = round(summary_kmposthtx_fit$upper * 100, 1),
  N_risk = summary_kmposthtx_fit$n.risk
)

print(kmposthtx_fit_table)

# Time for probability = 75% - 50% - 25%
kmposthtx_fit_quantiles <- quantile(kmposthtx_fit, probs = c(0.25, 0.5, 0.75))

kmposthtx_fit_quantile_table <- data.frame(
  Survival_percent = c(75, 50, 25),  
  Time_months = round(as.numeric(kmposthtx_fit_quantiles$quantile), 1)
)

print(kmposthtx_fit_quantile_table)

```

### Sopravvivenza post trapianto di cuore nei portatori di LVAD nei soggetti con infezione da organismi multiresistenti

```{r PostHTX Survival in LVAD recipients}
#| label: fig-kmposthtx-mdrolvad
#| fig-cap: "Post HTx survival in LVAD recipients"

kmposthtx2 <- kmposthtx %>% 
  left_join(limdro,by="study_id")
 

kmposthtx_fit2 <- survfit(Surv(posthtxsurvtime, status) ~ limdro, data = kmposthtx2)

w2<- ggsurvplot(kmposthtx_fit2, 
               data = kmposthtx2, 
               fun="pct", 
               risk.table = T,
               xlim=c(0,60),
               break.x.by = 12,
               legend = "top",
               xlab   = "Months after device implantation", 
               ylab   = "Survival Probability", 
               title  = "PostHTX Survival Curve in LVAD recipients",
               legend.title = "MDRO (LVAD support)",
               legend.labs = c("Yes", "No"),
               tables.theme = theme_cleantable())


w2

survdiff(Surv(posthtxsurvtime, status) ~ limdro, data = kmposthtx2)


```

### COX PH univariata: rischio infettivo post-trapianto

```{r uni.cox.ph-posthtxinfectionrisk}

#Prepare dataset for analysis
uni.cox.posthtxinfectionrisk.data <- data %>%
  filter(is.na(redcap_repeat_instance), !is.na(htx_date)) %>%
  select(study_id, age,bmi,lvad.time, all_of(baseline.cov)) %>%
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>% 
  left_join(htx.time.to.infection, by = "study_id") %>%     #survival data
  left_join(covariate.table, by = "study_id")   #covariates

# Variables
covariates <- c(
  "age","bmi", "sex.factor", "intermacs.cov",
  "hyper.factor", "dyslip.factor", "diabetes.factor",
  "renal_insuff.factor", "smoke.factor", "coronary_dis.factor",
  "infarction.cov", "valve_rep.factor", "pm.factor", "lvad.time",
  "sepsi.cov", "intermacs.cov", "lvad.era", "lvad_mod.cov",
  "severe.infection.cov","streptoinfection.cov",
  "GramNegative.factor","GramPositive.factor","Fungus.factor",
  "limdro","lvad.specific.infection_event.factor"
)

# Assessing Univariable Cox Models for all Covariates...
uni.cox.posthtxinfectionrisk <-
	coxphuni(uni.cox.posthtxinfectionrisk.data,
	         dependent = "Surv(survtime, infection_event)",
	         covariates)

# ... and summarise them in a nice table!
uni.cox.posthtxinfectionrisk %>%
  fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### COX PH multivariata: rischio infettivo post-trapianto

```{r multi.cox.ph-posthtxinfectionrisk}

#Prepare dataset for analysis

multi.cox.posthtxinfectionrisk.data <- data %>%
  filter(is.na(redcap_repeat_instance), !is.na(htx_date)) %>%
  select(study_id, age,bmi,lvad.time, all_of(baseline.cov)) %>%
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>% 
  left_join(htx.time.to.infection, by = "study_id") %>%     #survival data
  left_join(covariate.table, by = "study_id")   #covariates

# Assessing Multivariable Cox Models for selected Covariates...
multi.cox.posthtxinfectionrisk <- multi.cox.posthtxinfectionrisk.data %>% 
  coxph(Surv(survtime, infection_event) ~
          age +
          sex.factor +
          diabetes.factor + 
          severe.infection.cov+
          lvad.time+
          lvad.era,
        data=.)
#summary(multi.cox.posthtxinfectionrisk)

# ... and summarise them in a nice table!	
multi.cox.posthtxinfectionrisk.data %>%
  coxphmulti(dependent= "Surv(survtime, infection_event)", 
             explanatory = c("age","sex.factor","diabetes.factor","severe.infection.cov"," lvad.time","lvad.era"))%>%
  fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### COX PH univariata: rischio infettivo post-trapianto ed esposizione a terapia antibiotica

```{r univariate-Cox-PH-Antibiotics-Families-&-Infectionrisk }
# Variables
atb.covariates <- c("Quinolones","Cephalosporin","Glycopeptides",
                    "Anti_anaerobic_betalactam","Daptomycin","Doxycycline",
                    "Carbapenems","Non_anti_anaerobic_betalactam",
                    "Trimethoprim_Sulfamethoxazole","Linezolid",
                    "Other","Aminoglycosides","Antifungals","Macrolide")

cox.atb <- data %>%
  filter(!is.na(htx_date)) %>% 
  select(study_id,li_atb_1.factor_class,li_atb_2.factor_class,li_atb_3.factor_class,li_atb_4.factor_class) %>% 
  pivot_longer(
    cols = starts_with("li_atb_"),
    names_to = "atb_number",
    values_to = "antibiotic_class"
  ) %>% 
  drop_na() %>% 
  mutate(exposed = 1) %>%
  pivot_wider(
    id_cols = c(study_id),
    names_from = antibiotic_class,
    values_from = exposed,
    values_fill = 0,
    values_fn = max
  ) %>% 
  mutate(across(
    matches("^(Quinolones|Cephalosporin|Glycopeptides|Anti-anaerobic betalactam|Daptomycin|Doxycycline|Carbapenems|Non anti-anaerobic betalactam|Trimethoprim-Sulfamethoxazole|Linezolid|Other|Aminoglycosides|Antifungals|Macrolide)$"),
    ~ replace_na(., 0)
  )) %>% 
  rename(Anti_anaerobic_betalactam= 'Anti-anaerobic betalactam',
         Non_anti_anaerobic_betalactam= 'Non anti-anaerobic betalactam',
         Trimethoprim_Sulfamethoxazole='Trimethoprim-Sulfamethoxazole'
         ) %>% 
# Convert and relevel all binary ATB variables
  mutate(across(all_of(atb.covariates), ~ fct_relevel(as.factor(ifelse(. == 1, "Yes", "No")), "No", "Yes")))


uni.cox.posthtxinfectionrisk.atb <- cox.atb %>% 
left_join(htx.time.to.infection, by = "study_id")
 

uni.cox.posthtxinfectionrisk.atb %>% 
	coxphuni(dependent = "Surv(survtime, infection_event)",
	         atb.covariates) %>%  
	fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### COX PH univariata: rischio infettivo post-trapianto ed esposizione a Tazobactam/Meropenem

```{r univariate-Cox-PH-Tazobactam/Meropenem-&-Infectionrisk }


uni.cox.posthtxinfectionrisk.taz.mer <- htxlist %>% 
left_join(tazobactam.meropenem, by = "study_id") %>%  
left_join(htx.time.to.infection, by = "study_id")
 
uni.cox.posthtxinfectionrisk.taz.mer %>% 
	coxphuni(dependent = "Surv(survtime, infection_event)",
	         c("taz.mer")) %>%  
	fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")



```

### COX PH univariata: mortalità post-trapianto

```{r uni.cox.ph-posthtxmortality}

#Prepare dataset for analysis
uni.cox.posthtxmortality.data <- data %>%
  filter(is.na(redcap_repeat_instance), !is.na(htx_date)) %>%
  select(study_id, age,bmi,lvad.time, all_of(baseline.cov)) %>%
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>% 
  left_join(kmposthtx, by = "study_id") %>%     #survival data
  left_join(covariate.table, by = "study_id")   #covariates

# Variables
covariates <- c(
  "age","bmi", "sex.factor", "intermacs.cov",
  "hyper.factor", "dyslip.factor", "diabetes.factor",
  "renal_insuff.factor", "smoke.factor", "coronary_dis.factor",
  "infarction.cov", "valve_rep.factor", "pm.factor", "lvad.time",
  "sepsi.cov", "intermacs.cov", "infarction.cov", "lvad.era", "lvad_mod.cov",
  "severe.infection.cov","streptoinfection.cov",
  "GramNegative.factor","GramPositive.factor","Fungus.factor",
  "limdro","lvad.specific.infection_event.factor"
)

# Assessing Univariable Cox Models for all Covariates...
uni.cox.posthtxmortality <-
	coxphuni(uni.cox.posthtxmortality.data,
	         dependent = "Surv(posthtxsurvtime, status)",
	         covariates)

# ... and summarise them in a nice table!
uni.cox.posthtxmortality %>%
  fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### COX PH multivariata: mortalità post-trapianto

```{r multi.cox.ph-posthtxmortality}


#Prepare dataset for analysis

multi.cox.posthtxmortality.data <- data %>%
  filter(is.na(redcap_repeat_instance), !is.na(htx_date)) %>%
  select(study_id, age,bmi,lvad.time, all_of(baseline.cov)) %>%
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>% 
  left_join(kmposthtx, by = "study_id") %>%     #survival data
  left_join(covariate.table, by = "study_id")   #covariates

# Assessing Multivariable Cox Models for selected Covariates...
multi.cox.posthtxmortality <- multi.cox.posthtxmortality.data %>% 
  coxph(Surv(posthtxsurvtime, status) ~
          age +
          sex.factor +
          diabetes.factor + 
          renal_insuff.factor +
          lvad.time+
          lvad.era,
        data=.)
#summary(multi.cox.posthtxmortality)

# ... and summarise them in a nice table!	
multi.cox.posthtxmortality.data%>%
  coxphmulti(dependent= "Surv(posthtxsurvtime, status)", 
             explanatory = c("age","sex.factor","diabetes.factor","renal_insuff.factor","lvad.time","lvad.era"))%>%
  fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### COX PH univariata: mortalità post-trapianto ed esposizione a terapia antibiotica

```{r univariate-Cox-PH-Antibiotics-Families_&_Mortality}

uni.cox.posthtxmortality.atb <- cox.atb %>% 
full_join(kmposthtx, by = "study_id") 
    
uni.cox.posthtxmortality.atb %>% 
	coxphuni(dependent = "Surv(posthtxsurvtime, status)",
	         atb.covariates) %>%  
	fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

### COX PH univariata: mortalità post-trapianto ed esposizione a Tazobactam/Meropenem

```{r univariate-Cox-PH-Tazobactam/Meropenem-&-Mortality}

uni.cox.posthtxmortality.taz.mer <- htxlist %>% 
left_join(tazobactam.meropenem, by = "study_id") %>%  
left_join(kmposthtx, by = "study_id")
 
uni.cox.posthtxmortality.taz.mer %>% 
	coxphuni(dependent = "Surv(posthtxsurvtime,status)",
	         c("taz.mer")) %>%  
	fit2df()%>% 
  flextable() %>%
  align(align = "center", part = "all") %>% 
  autofit() %>% 
  bold(part = "header")

```

```{r appunti}

# insufficienza renale nei modelli di cox

```

## POSSIBLE SELECTION OF MULTI-DRUG RESISTANT PATHOGEN DERIVED FROM ANTIMICROBIAL TREATMENT

### Dati regressione logistica

```{r Logistic_Regression_Data}

####################################
#### FUNC: Antibiotics Exposure #### 
####################################

atb_classification_function <- function(atb) {
  case_when(
    is.na(atb) ~ NA_character_,
    

    atb %in% c("Amoxicillin-clav", "Amoxicillin", "Ampicillin") ~ "Aminopenicillin",
    atb == "Piperacillin-tazobactam" ~ "PiperacillinTazobactam",
    atb %in% c("Meropenem", "Imipenem", "Meropenem-vaborbactam", 
               "Ertapenem", "Imipenem-relebactam") ~ "Carbapenems",
    atb %in% c("Cefazolin", "Cefepime", "Ceftriaxone", "Cefiderocol", 
               "Cefitaxime", "Ceftazidime", "Ceftazidime-avibactam", 
               "Ceftolozane-tazobactam", "Ceftaroline", "Ceftobiprole") ~ "Cephalosporins",
    atb %in% c("Daptomycin", "Vancomycin", "Linezolid") ~ "AntiMRSA",
    atb == "Doxycycline" ~ "Doxycycline",
    atb == "Trimethroprim-Sulfamethoxazole" ~ "TMPSMX",
    atb %in% c("Ciprofloxacin", "Levofloxacin") ~ "Quinolones",
    TRUE ~ "Other"
  )
}

###########################
#### FUNC: MDRO Groups #### 
##########################

mdro_group_function <- function(li_mdro.factor) {
  case_when(
    is.na(li_mdro.factor) ~ NA_character_,
  
    li_mdro.factor %in% c("CARBA-R (non carbapenemasi, Enterobacterales)","DTR (P.aeruginosa e A.baumannii)","KPC","VIM") ~ "CRO",
    li_mdro.factor == "ESBL" ~ "ESBL",
    li_mdro.factor == "MRSA" ~ "MRSA",
    TRUE ~ "Other"
  )
}

#######################################
####  Data for Logistic Regression #### 
#######################################

# "Long dataset"  with 
  # - all ANTIBIOTIC THERAPIES (included those BEFORE LVAD implantation)
  # - MDRO group
  # Data can be stratified by: - study_id, - li_event_date 

atb.mdro.table <- map_dfr(1:4, ~{
  data %>%
    #filter(li_event_date > lvad_date) %>% 
    select(
      study_id,
      li_event_date,
      li_mdro.factor,
      lvad_date,
      atb = !!sym(glue("li_atb_{.x}.factor")),
      start = !!sym(glue("li_atb_{.x}_start")),
      end = !!sym(glue("li_atb_{.x}_end"))
    )
}) %>%
  drop_na(li_event_date,atb,end) %>% #dropping NA's
  mutate(
    atbdays = as.numeric(end - start),
    atb_class = atb_classification_function(atb),
    mdro_group = mdro_group_function(li_mdro.factor)
  ) 

mdro_cases <- atb.mdro.table %>%
  #filter(!is.na(mdro_group)) %>%
  #filter(li_event_date > lvad_date) %>%
  select(study_id, mdro_event_date = li_event_date,mdro_group,lvad_date) %>%
  distinct() %>%
  mutate(mdroinfection = ifelse(is.na(mdro_group),0,1)) %>% 
   pivot_wider(
    names_from = mdro_group,
    values_from = mdroinfection,
    values_fill = list(mdroinfection = 0)
  ) %>% 
  mutate(MDRO = CRO + ESBL)%>% 
  select(-"NA",-"Other",-"ESBL") 
  
atb_exposure <- mdro_cases %>%
  select(-CRO,-MRSA,-MDRO) %>% 
  left_join( #Join data to get all prior antibiotic exposures for same patient
    atb.mdro.table %>%
      select(study_id, end, atb_class),  
    by = "study_id"
  ) %>%
  filter(!is.na(end)) %>%
  mutate(
    days_before = as.numeric(difftime(mdro_event_date, end, units = "days"))) %>% 
  #filter(days_before <91 & days_before >1) %>% 
  mutate(
    atb.30 = ifelse(days_before >= 1 & days_before <= 30,1,0),
    atb.60 = ifelse(days_before >= 1 & days_before <= 60,1,0),
    atb.90 = ifelse(days_before >= 1 & days_before <= 90,1,0)
  )  

###########################################
#### ATB exposure function (30,60,90)  #### 
###########################################

atb_exposure_function <- function(data, atb_var = "atb.30") {
  atb_sym <- sym(atb_var)
  
 data %>%
    select(study_id, mdro_event_date, atb_class, !!atb_sym) %>%
    group_by(study_id, mdro_event_date, atb_class) %>%
    summarise(atb_value = max(!!atb_sym, na.rm = TRUE), .groups = "drop") %>%
    pivot_wider(
      names_from = atb_class,
      values_from = atb_value,
      values_fill = 0
    )
}

atb_exposure_30 <-  atb_exposure_function(atb_exposure, atb_var = "atb.30")
atb_exposure_60 <-  atb_exposure_function(atb_exposure, atb_var = "atb.60")
atb_exposure_90 <-  atb_exposure_function(atb_exposure, atb_var = "atb.90")

mdro_cases <- mdro_cases %>% 
 filter(mdro_event_date > lvad_date)

###############################################
#### Atb exposure (30,60,90 days) dataset #### 
###############################################

atb.mdro.30 <- mdro_cases %>% 
  left_join(atb_exposure_30, by = c("study_id","mdro_event_date"))

atb.mdro.60 <- mdro_cases %>% 
  left_join(atb_exposure_60, by = c("study_id","mdro_event_date"))

atb.mdro.90 <- mdro_cases %>% 
  left_join(atb_exposure_90, by = c("study_id","mdro_event_date"))

###################################################
#### Baseline covariates dataset #### 
###################################################
covariate.table2 <- ptlist %>%
  left_join_study_id(intermacs.cov) %>%
  left_join_study_id(infarction.cov) %>%
  left_join_study_id(lvad.era) %>%
  left_join_study_id(lvad_mod.cov) 

baseline.covariates <- data %>%
  filter(is.na(redcap_repeat_instance)) %>%
  select(study_id,age,bmi, all_of(baseline.cov)) %>% 
  mutate(across(all_of(baseline.cov), ~ fct_relevel(.x, "No", "Yes"))) %>%
  left_join(covariate.table2,by = "study_id") 

baseline.covariates.data <- mdro_cases %>%
  left_join(baseline.covariates,by = "study_id") %>%
  mutate(lvad.support.days = as.numeric(difftime(mdro_event_date, lvad_date, units = "days")))
 
summary(baseline.covariates)
########################################################
#### Dataset for multivariate logistic regressions  #### 
########################################################

atb.mdro.30.data <- atb.mdro.30 %>% 
  left_join(baseline.covariates,by = "study_id") 

atb.mdro.60.data <- atb.mdro.60 %>% 
  left_join(baseline.covariates,by = "study_id") 

atb.mdro.90.data <- atb.mdro.90 %>% 
  left_join(baseline.covariates,by = "study_id") 

covariates2 <- c(
  "age","bmi", "sex.factor","hyper.factor", "dyslip.factor", "diabetes.factor",
  "renal_insuff.factor", "smoke.factor", "coronary_dis.factor",
  "valve_rep.factor", "pm.factor",            #baseline covariates
  "lvad.support.days",
  "infarction.cov","intermacs.cov", "lvad.era", "lvad_mod.cov")

predictors <- c("Carbapenems", "Cephalosporins", "Quinolones", 
                "Aminopenicillin", "AntiMRSA", "Doxycycline", 
                "TMPSMX", "PiperacillinTazobactam")
```

### (CRO) Logistica univariata

```{r CRO_univariate_logistic_regression}

# OUTCOME: sviluppo organismi resistenti ai Carbapenemi (CRO)
# PREDICTORS: baseline covariates
# PREDICTORS:esposizione antibiotica (30,60,90 gg)

# Function to fit univariate logistic models for a given dataset
fit_univariate_models <- function(data, outcome = "CRO", predictors) {
  models <- lapply(predictors, function(var) {
    formula <- as.formula(paste(outcome, "~", var))
    glm(formula, family = binomial, data = data)
  })
  names(models) <- predictors
  return(models)
}

# Fit model
baseline_univariate_models <- fit_univariate_models(baseline.covariates.data, 
                                                   predictors = covariates2)
# Fit models for each dataset
univariate_models_30 <- fit_univariate_models(atb.mdro.30, predictors = predictors)
univariate_models_60 <- fit_univariate_models(atb.mdro.60, predictors = predictors)
univariate_models_90 <- fit_univariate_models(atb.mdro.90, predictors = predictors)

# Function to extract summary table from a list of models
extract_model_summary <- function(models, model_set_name) {
  bind_rows(lapply(names(models), function(var_name) {
    model <- models[[var_name]]
    summary <- tidy(model)
    summary <- summary %>%
      filter(term != "(Intercept)") %>%
      select(term, estimate, p.value) %>%
      mutate(predictor = var_name,
             model_set = model_set_name)
  }))
}

# Extract summaries from each model set
summary_baseline <- extract_model_summary(baseline_univariate_models, "Baseline")
summary_30 <- extract_model_summary(univariate_models_30, "30 days")
summary_60 <- extract_model_summary(univariate_models_60, "60 days")
summary_90 <- extract_model_summary(univariate_models_90, "90 days")

# Combine all summaries
summary_all <- bind_rows(summary_baseline,summary_30, summary_60, summary_90)

# Clean and format
summary_all <- summary_all %>%
  select(model_set, predictor, estimate, p.value) %>%
  mutate(
    estimate = round(estimate, 3),
    p.value = signif(p.value, 3)
  )

# Create flextable
ft <- flextable(summary_all) %>%
  set_header_labels(
    model_set = "Model Set",
    predictor = "Predictor",
    estimate = "Coefficient",
    p.value = "p-value"
  ) %>%
  autofit()

ft

```

### (CRO) Logistica multivariata: esposizione antibiotica (30,60,90 gg) e sviluppo organismi resistenti ai Carbapenemi

```{r CRO_multivariate_logistic_regression}

cro.30.fit <- glm(
CRO ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.30 , family = binomial
)

cro.60.fit <- glm(
CRO ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.60 , family = binomial
)

cro.90.fit <- glm(
CRO ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.90 , family = binomial
)

covariates2 <- c(
  "age","bmi", "sex.factor","hyper.factor", "dyslip.factor", "diabetes.factor",
  "renal_insuff.factor", "smoke.factor", "coronary_dis.factor",
  "valve_rep.factor", "pm.factor",            #baseline covariates
  "lvad.support.days",
  "infarction.cov","intermacs.cov", "lvad.era", "lvad_mod.cov")

cro.30.fit <- glm(
CRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor + lvad.era + Carbapenems + AntiMRSA ,
data = atb.mdro.30.data , family = binomial
)

cro.60.fit <- glm(
CRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor + lvad.era + Carbapenems + AntiMRSA ,
data = atb.mdro.60.data , family = binomial
)

cro.90.fit <- glm(
CRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor + lvad.era + Carbapenems + AntiMRSA ,
data = atb.mdro.90.data , family = binomial
)

summary(cro.30.fit)
summary(cro.60.fit)
summary(cro.90.fit)
```

### (CRO) Generalized Estimating Equations (GEE)

```{r CRO Generalized Estimating Equations GEE}

library(geepack)

gee.atb.mdro.30.data <- atb.mdro.30.data %>% 
    select(CRO, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,study_id) %>%
  na.omit()

gee.atb.mdro.60.data <- atb.mdro.60.data %>% 
    select(CRO, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,study_id) %>%
  na.omit()

gee.atb.mdro.90.data <- atb.mdro.90.data %>% 
    select(CRO, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,study_id) %>%
  na.omit()

gee_model.30 <- geeglm(
  CRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.30.data,
  corstr = "exchangeable"  
)

gee_model.60 <- geeglm(
  CRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.60.data,
  corstr = "exchangeable"  
)

gee_model.90 <- geeglm(
  CRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.90.data,
  corstr = "exchangeable"  
)

summary(gee_model.30)
summary(gee_model.60)
summary(gee_model.90)
```

```{r}

 atb.mdro.30.data %>% 
  group_by(study_id) %>% 
  mutate(dummy = MDRO + MRSA) %>% 
  select(dummy) %>% 
  View()

test <- data %>% 
  select(study_id,li_event_date,li_mdro.factor) %>% 
  group_by(study_id) %>% 
  unique() %>% 
  drop_na(li_mdro.factor) %>% 
  ungroup()

unique(test$study_id)

View(test)

```

### (MDRO) Logistica univariata: esposizione antibiotica (30,60,90 gg) e sviluppo organismi multi-resistenti

```{r MDRO_univariate_logistic_regression}
# OUTCOME: sorganismi multi-resistenti (MDRO)
# PREDICTORS: baseline covariates
# PREDICTORS:esposizione antibiotica (30,60,90 gg)

# Function to fit univariate logistic models for a given dataset
fit_univariate_models <- function(data, outcome = "MDRO", predictors) {
  models <- lapply(predictors, function(var) {
    formula <- as.formula(paste(outcome, "~", var))
    glm(formula, family = binomial, data = data)
  })
  names(models) <- predictors
  return(models)
} 


# Fit model
baseline_univariate_models <- fit_univariate_models(baseline.covariates.data, 
                                                   predictors = covariates2)
# Fit models for each dataset
univariate_models_30 <- fit_univariate_models(atb.mdro.30, predictors = predictors)
univariate_models_60 <- fit_univariate_models(atb.mdro.60, predictors = predictors)
univariate_models_90 <- fit_univariate_models(atb.mdro.90, predictors = predictors)

# Function to extract summary table from a list of models
extract_model_summary <- function(models, model_set_name) {
  bind_rows(lapply(names(models), function(var_name) {
    model <- models[[var_name]]
    summary <- tidy(model)
    summary <- summary %>%
      filter(term != "(Intercept)") %>%
      select(term, estimate, p.value) %>%
      mutate(predictor = var_name,
             model_set = model_set_name)
  }))
}

# Extract summaries from each model set
summary_baseline <- extract_model_summary(baseline_univariate_models, "Baseline")
summary_30 <- extract_model_summary(univariate_models_30, "30 days")
summary_60 <- extract_model_summary(univariate_models_60, "60 days")
summary_90 <- extract_model_summary(univariate_models_90, "90 days")

# Combine all summaries
summary_all <- bind_rows(summary_baseline,summary_30, summary_60, summary_90)

# Clean and format
summary_all <- summary_all %>%
  select(model_set, predictor, estimate, p.value) %>%
  mutate(
    estimate = round(estimate, 3),
    p.value = signif(p.value, 3)
  )

# Create flextable
ft <- flextable(summary_all) %>%
  set_header_labels(
    model_set = "Model Set",
    predictor = "Predictor",
    estimate = "Coefficient",
    p.value = "p-value"
  ) %>%
  autofit()

ft



```

### (MDRO) Logistica multivariata: esposizione antibiotica (30,60,90 gg) e sviluppo organismi multi-resistenti

```{r MDRO_multivariate_logistic_regression}

mdro.30.fit <- glm(
MDRO ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.30 , family = binomial
)

mdro.60.fit <- glm(
MDRO ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.60 , family = binomial
)

mdro.90.fit <- glm(
MDRO ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.90 , family = binomial
)

mdro.30.fit <- glm(
MDRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor + lvad.era + Carbapenems + AntiMRSA ,
data = atb.mdro.30.data , family = binomial
)

mdro.60.fit <- glm(
MDRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor + lvad.era + Carbapenems + AntiMRSA ,
data = atb.mdro.60.data , family = binomial
)

mdro.90.fit <- glm(
MDRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor + lvad.era + Carbapenems + AntiMRSA ,
data = atb.mdro.90.data , family = binomial
)

summary(mdro.30.fit)
summary(mdro.60.fit)
summary(mdro.90.fit)

```

### (MDRO) Generalized Estimating Equations (GEE)

```{r MDRO Generalized Estimating Equations (GEE)}
library(geepack)

gee.atb.mdro.30.data <- atb.mdro.30.data %>% 
  select(MDRO, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,study_id) %>%
  na.omit()

gee.atb.mdro.60.data <- atb.mdro.60.data %>% 
  select(MDRO, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,study_id) %>%
  na.omit()

gee.atb.mdro.90.data <- atb.mdro.90.data %>% 
  select(MDRO, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,study_id) %>%
  na.omit()

gee_model.30 <- geeglm(
  MDRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.30.data,
  corstr = "exchangeable"  
)

gee_model.60 <- geeglm(
  MDRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.60.data,
  corstr = "exchangeable"  
)

gee_model.90 <- geeglm(
  MDRO ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.90.data,
  corstr = "exchangeable"  
)

summary(gee_model.30)
summary(gee_model.60)
summary(gee_model.90)
```

### (MRSA) Logistica univariata

```{r MRSA_univariate_logistic_regression}

# OUTCOME: sviluppo S.aureus resistente alla meticillina (MRSA)
# PREDICTORS: baseline covariates
# PREDICTORS:esposizione antibiotica (30,60,90 gg)

# Function to fit univariate logistic models for a given dataset
fit_univariate_models <- function(data, outcome = "MRSA", predictors) {
  models <- lapply(predictors, function(var) {
    formula <- as.formula(paste(outcome, "~", var))
    glm(formula, family = binomial, data = data)
  })
  names(models) <- predictors
  return(models)
}

# Fit model
baseline_univariate_models <- fit_univariate_models(baseline.covariates.data, 
                                                   predictors = covariates2)
# Fit models for each dataset
univariate_models_30 <- fit_univariate_models(atb.mdro.30, predictors = predictors)
univariate_models_60 <- fit_univariate_models(atb.mdro.60, predictors = predictors)
univariate_models_90 <- fit_univariate_models(atb.mdro.90, predictors = predictors)

# Function to extract summary table from a list of models
extract_model_summary <- function(models, model_set_name) {
  bind_rows(lapply(names(models), function(var_name) {
    model <- models[[var_name]]
    summary <- tidy(model)
    summary <- summary %>%
      filter(term != "(Intercept)") %>%
      select(term, estimate, p.value) %>%
      mutate(predictor = var_name,
             model_set = model_set_name)
  }))
}

# Extract summaries from each model set
summary_baseline <- extract_model_summary(baseline_univariate_models, "Baseline")
summary_30 <- extract_model_summary(univariate_models_30, "30 days")
summary_60 <- extract_model_summary(univariate_models_60, "60 days")
summary_90 <- extract_model_summary(univariate_models_90, "90 days")

# Combine all summaries
summary_all <- bind_rows(summary_baseline,summary_30, summary_60, summary_90)

# Clean and format
summary_all <- summary_all %>%
  select(model_set, predictor, estimate, p.value) %>%
  mutate(
    estimate = round(estimate, 3),
    p.value = signif(p.value, 3)
  )

# Create flextable
ft <- flextable(summary_all) %>%
  set_header_labels(
    model_set = "Model Set",
    predictor = "Predictor",
    estimate = "Coefficient",
    p.value = "p-value"
  ) %>%
  autofit()

ft

```

### (MRSA) Logistica multivariata: esposizione antibioca (30,60,90 gg) e sviluppo S.aureus resistente alla meticillina

```{r MRSA_multivariate_logistic_regression}

mrsa.30.fit <- glm(
MRSA ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.30 , family = binomial
)

mrsa.60.fit <- glm(
MRSA ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.60 , family = binomial
)

mrsa.90.fit <- glm(
MRSA ~ Carbapenems + Cephalosporins + Quinolones + Aminopenicillin + AntiMRSA + Doxycycline + TMPSMX + PiperacillinTazobactam,
data = atb.mdro.90 , family = binomial
)

summary(mrsa.30.fit)
summary(mrsa.60.fit)
summary(mrsa.90.fit)

```

### (MRSA) Generalized Estimating Equations (GEE)

```{r MRSA Generalized Estimating Equations (GEE)}
library(geepack)

gee.atb.mdro.30.data <- atb.mdro.30.data %>% 
  select(MRSA, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,TMPSMX,study_id) %>%
  na.omit()

gee.atb.mdro.60.data <- atb.mdro.60.data %>% 
  select(MRSA, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,TMPSMX,study_id) %>%
  na.omit()

gee.atb.mdro.90.data <- atb.mdro.90.data %>% 
  select(MRSA, age, hyper.factor, renal_insuff.factor, smoke.factor,
         lvad.era, Carbapenems, AntiMRSA,TMPSMX,study_id) %>%
  na.omit()

gee_model.30 <- geeglm(
  MRSA ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA + TMPSMX,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.30.data,
  corstr = "exchangeable"  
)

gee_model.60 <- geeglm(
  MRSA ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA + TMPSMX,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.60.data,
  corstr = "exchangeable"  
)

gee_model.90 <- geeglm(
  MRSA ~ age + hyper.factor + renal_insuff.factor + smoke.factor +
    lvad.era + Carbapenems + AntiMRSA + TMPSMX,
  family = binomial,
  id = study_id,  
  data = gee.atb.mdro.90.data,
  corstr = "exchangeable"  
)

summary(gee_model.30)
summary(gee_model.60)
summary(gee_model.90)
```

## CORRELATION BETWEEN ANTIMICROBIAL EXPOSURE AND CLINICAL OUTCOMES

```{r Multi-State-Model}
library(mstate)
library(labelled)

mdro_group_function2 <- function(li_mdro.factor) {
  case_when(
    is.na(li_mdro.factor) ~ "Non-MDRO",
    li_mdro.factor %in% c("CARBA-R (non carbapenemasi, Enterobacterales)","DTR (P.aeruginosa e A.baumannii)","KPC","VIM","ESBL") ~ "MDRO",
    li_mdro.factor == "MRSA" ~ "MRSA",
    TRUE ~ "Non-MDRO",
  )
}

#####################################
#### Multi State Model Data Prep #### 
#####################################

atb2 <- map_dfr(1:4, ~{
  data %>%
    filter(!is.na(!!sym(glue::glue("li_atb_{.x}_start")))) %>%
   mutate(
     study_id = study_id,
     li_event_date = li_event_date,
     li_mdro.factor = li_mdro.factor,
     #li_mdro.factor = fct_na_value_to_level(li_mdro.factor,level = "Non-MDRO"),
     atb = !!sym(glue::glue("li_atb_{.x}.factor")),
     start = !!sym(glue::glue("li_atb_{.x}_start")),
     end = !!sym(glue::glue("li_atb_{.x}_end")),
     .keep = "none"
     )
  }) %>%
  drop_na(start, end) %>%
  mutate(
    atbdays = as.numeric(end - start),
    li_mdro.factor = mdro_group_function2(li_mdro.factor),
    atb_class = atb_classification_function(atb),
    from_state = case_when(
      li_mdro.factor == "Non-MDRO" ~ 1,
      li_mdro.factor == "MDRO" ~ 2,
      li_mdro.factor == "MRSA" ~ 3
    ),
  ) %>% 
  group_by(study_id, li_event_date) %>%
  slice_max(end,with_ties = F) %>% 
  ungroup() %>% 
  mutate(last_abx=end,
         to_state = 0,
         trans_date = last_abx + 1)  

msm.data <- data %>%
  filter(!is.na(li_event_date)) %>% 
  filter(!is.na(li_atb_1_start)) %>% 
  left_join(atb2, by = c("study_id", "li_event_date")) 



# Original infections + resolution rows
infect_events <- msm.data %>%
  mutate(
    study_id = study_id,
    li_event_date = li_event_date,
    time = as.numeric(li_event_date - lvad_date),
    from = 0,
    to = from_state,
    .keep = "none"
  )
#View(infect_events)

resolution_events <- msm.data %>%
  mutate(
    study_id = study_id,
    time = as.numeric(trans_date - lvad_date),
    from = from_state,
    to = to_state,
    li_event_date = trans_date,
    .keep = "none"
  )

# Merge and remove NA times
all_transitions <- bind_rows(infect_events, resolution_events) %>%
  drop_na(time) %>%
  arrange(study_id, time)


```

## ANTIMICROBIAL EXPOSURE AND INFECTIONS IN COURSE OF LVAD SUPPORT AND POST- TRANSPLANT OUTCOME


